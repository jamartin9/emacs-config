
* emacs-config
This configuration relies on a few utilities. Built-in functionality is preferred when functionality is close to identical.
The dependencies are: emacs >= 29/28, guix (guix.el), gnupg (authinfo), git (magit), rg/fd (dired), pass (password-store), aspell (flyspell), vlc/mpv (emms), notification-daemon (erc), c compiler (vterm), sqlite (forge/roam), osc terminal emulator (xterm.el) and a shell.

Current package considerations:
signal-msg: sms support dropping? unmaintained/broken currently (apply fixes/rewrite?)

Third party package choices:
gcmh: collect garbage when idle to avoid pauses. alternative is increase gc-cons-threshold per workflow
emms: frontend for music/video player. alternative is cli invocation of tools
rmsbolt: decompiler explorer. alternative is external decompiler.
guix: package/environment management. alternative is pinning with use-packages and setting exec-path-from-shell
pass: frontend to password-store. alternative is git repo of authinfo.gpg store.
vterm: graphical terminal emulation. alternative built-in multi-term lacks visual command support
magit/forge/code-review: git/forge manipulation. alternative built-in vc lacks complex workflows like interactive rebase or forge pull requests or code-review
debbugs: track emacs/guix bugs. alternative is bookmarking websites
transmission: manage torrent client. alternative is scripting transmission-cli
org-roam: tag system for note database. alternative is self devised naming/search scheme with org-captured journal
fd-dired: speedup dired operations with rg/fd. alternative is find/grep
undo-tree: undo edit persist restarts. alternative is built-in undo with session persistence redone
flycheck: lsp, guile, rust checkers. alternative built-in flymake only has 10 backends w/o external packages
company: automatic typing suggestions. alternatives corfu lacks backends w/o cape and auto-complete is obe
lsp-mode: debugging with dap-mode. alternative: eglot, realgud, lang specific packages (ex. jedi for python)
treemacs: workspace/project drawer with lsp/flycheck/company features. alternative is manual workspaces with built-in project.el
smartparens: saves typing closing delimiters and strict matching speeds up font highlighting by avoiding broken/missing matches
minions-mode: keeps the modeline visually brief with retained information. alternative: diminish/delight packages and config for each mode
multiple-cursors: mass editing. alternative: reinvent with a function of marks and operations.
explain-pause-mode: profiler top like realtime view. alternative is profiler-report snapshots
expand-region: select semantic units of text. alternative is set mark and search/select
langs: rustic, guile-geiser, pyvenv/pyls/debugpy. alternative is only use elisp
which-key: show keymap keybinds. alternative is describe-* functions for bind discovery
pcre2el: regex converter. alternative is a smooth big brain

** Clone
Branch names diverging and "." complicate fetching the correct heads.

#+NAME: clone
#+BEGIN_SRC sh :tangle no
git clone --single-branch --recurse-submodules --shallow-submodules --depth=1 git@github.com:jamartin9/emacs-config.git
# get branch heads
git submodule foreach 'git checkout master'
#+END_SRC

** Tangle
Emacs untangles the script from the org file (using noweb to copy/eval code).

#+NAME: tangle
#+BEGIN_SRC sh :tangle no
pwsh make-el.ps1 install
#+END_SRC

** Link
Installable org files tangle to a script of the same name for installation.
The script needs itself and emacs on the PATH or CWD.

#+NAME: link-README
#+BEGIN_SRC emacs-lisp :tangle README.sh :shebang "\":\"; emacs -Q --script README.sh -- $@ $args ; exit $? # -*- mode: emacs-lisp; lexical-binding: t; -*-"
(ignore-errors
      (make-symbolic-link (file-name-directory (or load-file-name buffer-file-name)) (concat (file-name-as-directory (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") (concat (file-name-as-directory (getenv "HOME")) ".config"))) "emacs")))
#+END_SRC

** Run
The one line org-mode sesquicolon 'shebang' is a multipart shell/powershell wrapper.
Passed arguments to the elisp script are available by argv (ignoring “–” and “$@”).
To run with powershell use the same wrapper format with a .ps1 extension.

#+NAME: run-wrapper
#+BEGIN_SRC sh :tangle no
":"; emacs -Q --script README.sh -- $@ $args ; exit $? # -*- mode: emacs-lisp; lexical-binding: t; -*-
#+END_SRC
