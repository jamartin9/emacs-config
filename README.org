
* emacs-config
This configuration relies on a few utilities. Built-in functionality is preferred when functionality is close to identical.

The dependencies are: emacs >= 29, git (magit), guix (guix.el), pass/gpg (password-store/pass-otp/authinfo), aspell (flyspell), mpv (emms), curl (osm), transmission and a shell.

Current package considerations:
combobulate: for structural editing/folding
dape: debug adapter protocol frontend
explain-pause-mode: profiler top like realtime view. alternative is profiler-report snapshots

Third party package choices:

emms: frontend for music/video player with radio. alternative mpv.el or cli

rmsbolt: decompiler explorer. alternative is external decompiler.

guix: package/environment management. alternative is ensure/pinning with use-packages and setting exec-path-from-shell

pass/pass-otp: frontend to password-store. alternative is git repo of authinfo.gpg store and totp app.

eat: graphical terminal emulation. alternative built-in multi-term w/o visual commands

magit/forge/code-review: git/forge manipulation. alternative built-in vc lacks complex workflows like interactive rebase, forge pull requests or code-review

debbugs: track emacs/guix bugs. alternative is bookmarking websites/mailing lists

transmission: manage torrent client. alternative is scripting transmission-cli

org-roam: tag system for note database. alternative is self devised naming/search scheme with org-captured datetree journal

undo-tree: undo edit persist restarts. alternative is built-in undo with session persistence redone

company: automatic typing suggestions. alternatives corfu lacks backends w/o cape and auto-complete is obe

minions-mode: keeps the modeline visually brief with retained information. alternative: diminish/delight packages and config for each mode

which-key: show keymap keybinds. alternative is describe-* functions for bind discovery

osm: Map tile viewer. alternative is web browser viewing

pcre2el: regex converter. alternative is a smooth big brain

geiser-guile/rust-mode/yaml-mode: language specific modes

** Clone
Branch names diverging and "." complicate fetching the correct heads.

#+NAME: clone
#+BEGIN_SRC sh :tangle no
git clone --single-branch --recurse-submodules --shallow-submodules --depth=1 git@github.com:jamartin9/emacs-config.git
# get branch heads
git submodule foreach 'git checkout master'
#+END_SRC

** Tangle Install
Emacs untangles the script from the org file (using noweb to copy/eval code) while expanding INCLUDE directives.
Tangling is rerun when the org file is newer than the script (if present) and the html file.
Cleanup is done via the ~clean~ arguments to the ~make-el~ wrapper.
The wrapper is needed for org-roam, org-ids and html export tags.

#+NAME: tangle-install
#+BEGIN_SRC sh :tangle no
pwsh make-el.ps1 install
#+END_SRC

** Link
Installable org files tangle to a script of the same name for installation.
The script needs itself and emacs on the PATH or CWD.

#+NAME: link-README
#+BEGIN_SRC emacs-lisp :tangle README.sh :shebang "\":\"; emacs -Q --script README.sh -- $@ $args ; exit $? # -*- mode: emacs-lisp; lexical-binding: t; -*-"
(ignore-errors
      (make-symbolic-link (file-name-directory (or load-file-name buffer-file-name)) (concat (file-name-as-directory (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") (concat (file-name-as-directory (getenv "HOME")) ".config"))) "emacs")))
#+END_SRC

** Run
The one line org-mode sesquicolon 'shebang' is a multipart shell/powershell wrapper.
Passed arguments to the elisp script are available by argv (ignoring “–” and “$@”).
To run with powershell use the same wrapper format with a .ps1 extension.
#+NAME: run-wrapper
#+BEGIN_SRC sh :tangle no
":"; emacs -Q --script README.sh -- $@ $args ; exit $? # -*- mode: emacs-lisp; lexical-binding: t; -*-
#+END_SRC
(BUG? Scripts that require packages need load-path from early-init; so make-el uses ~--batch -l early-init.el~ instead)

** Cherry Picking
Copy files by url with emacs
#+NAME: elisp-copy
#+BEGIN_SRC elisp :tangle no
(url-copy-file "https://raw.githubusercontent.com/jamartin9/emacs-config/master/init.el" "init.el")
(url-copy-file "https://raw.githubusercontent.com/jamartin9/emacs-config/master/early-init.el" "early-init.el")
(call-process "git" nil t nil "clone" "https://github.com/jamartin9/emacs-config")
#+END_SRC

** Site
Clone the site
#+NAME: clone-gh-pages
#+BEGIN_SRC sh :tangle no
git worktree add --track -b gh-pages ./gh-pages origin/gh-pages
#+END_SRC

Build the updated site
#+NAME: tangle-site
#+BEGIN_SRC sh :tangle no
pwsh make-el.ps1 site
#+END_SRC
