
* emacs-config
This configuration relies on a few utilities.
The dependencies are: emacs >= 29/28, rg, fd, guix, git, gnupg, pass (password-store), aspell (flyspell), vlc/mpv (emms), notification-daemon (erc), c compiler (vterm), sqlite (forge) and a shell

** Clone
Branch names diverging and "." complicate fetching the correct heads.

#+NAME: clone
#+BEGIN_SRC sh :tangle no
git clone --single-branch --recurse-submodules --shallow-submodules --depth=1 git@github.com:jamartin9/emacs-config.git
# get branch heads
git submodule foreach 'git checkout master'
#+END_SRC

** Tangle
Emacs untangles the script from the org file (using noweb to copy/eval code).

#+NAME: tangle
#+BEGIN_SRC sh :tangle no
pwsh make-el.ps1 install
#+END_SRC

** Link
Installable org files tangle to a script of the same name for installation.
The script needs itself and emacs on the PATH or CWD.

#+NAME: link-README
#+BEGIN_SRC emacs-lisp :tangle README.sh :shebang "\":\"; emacs -Q --script README.sh -- $@ $args ; exit $? # -*- mode: emacs-lisp; lexical-binding: t; -*-"
(ignore-errors
      (make-symbolic-link (file-name-directory (or load-file-name buffer-file-name)) (concat (file-name-as-directory (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") (concat (file-name-as-directory (getenv "HOME")) ".config"))) "emacs")))
#+END_SRC

** Run
The one line org-mode sesquicolon 'shebang' is a multipart shell/powershell wrapper.
Passed arguments to the elisp script are available by argv (ignoring “–” and “$@”).
To run with powershell use the same wrapper format with a .ps1 extension.

#+NAME: run-wrapper
#+BEGIN_SRC sh :tangle no
":"; emacs -Q --script README.sh -- $@ $args ; exit $? # -*- mode: emacs-lisp; lexical-binding: t; -*-
#+END_SRC
