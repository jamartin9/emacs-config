:PROPERTIES:
:ID:       1fd6a775-91da-4939-988f-63d30363ffc2
:END:
#+title: programming-languages
#+OPTIONS: toc:nil num:nil date:nil \n:nil html-style:nil author:nil timestamp:nil title:nil html-postamble:nil html5-fancy:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-default.css" />
#+HTML_CONTENT_CLASS: container content
#+HTML_DOCTYPE: html5
#+INCLUDE: "css.org::navbar" :only-contents t
* Programming Languages
The tower of babel is your type system as a macro
** shell
- use ~shellcheck~ for common issues and errors in scripts
- sh
  - posix shell
  - https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/utilities/sh.html
  - ~cmd 2>&1 | tee -- "log.txt"~
- [[id:b3b9d8e3-c20f-49ec-acf7-0cb2cf4a6c1a][bash]]
- [[id:948e8828-a510-4088-a846-888cfc719914][zsh]]
- ksh
  - setenv for environment variables
** [[id:12a3e66b-5ada-4bfc-ab64-819a0d46d204][c]]
** c++
- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines
- gcc < 11 can be built with c++98; c++11 required for 11+
- ~static_assert~ compile time checks UB and leaks
- RTTI can be used for runtime reflection
- c++11
  - constexpr, unique_ptr, move semantics, memory model
- c++14
  - reader writer locks
- c++17
  - parallell stl, std filesystem
- c++20
  - modules, concepts(templates constraints), ranges, coroutines
- c++23
  - generators, import std;, std::expected
** [[id:e518d6e6-18f5-4bb5-8b92-135b125b5797][rust]]
- win 7 support removed in 1.75
- ~rr record -c 10000 <program> <args>~ context switches thread after 10000 cpu ticks
- musl added dns tcp in 1.2.4
- [[https://github.com/xtuc/wasm-coredump/tree/main][wasm core dump debugging with wasmgdb]]
- [[id:3d101bb5-0125-41bc-9678-e43487122c7d][gdb]]
** [[id:a168933c-6a2b-456e-9fd0-760c5bc180dc][css]]
- colors with hex or oklch
- https://github.com/whatwg/html for spec
- document.designMode="on" for inline editing
** [[id:7c407252-45a1-41a6-901a-cfdb19a6ac36][make]]
** [[id:0713d4b4-4d66-495b-9d1b-192c91a8ab9f][elixir]]
** [[id:b4f4114e-75e8-4312-8c96-5567ca6d6b80][julia]]
** [[id:ec8d7fc7-d5fa-4265-b795-043a5e55cd33][golang]]
** [[id:0a869230-4f44-4e06-97a1-e35ec5cde213][ruby]]
** jvm
- Valhalla for value objects (remove boxing overhead)
- Loom for user mode green threads
- panama for native library linkage
*** [[id:2b605045-23e1-4995-9ed4-843699a0481f][java]]
** javascript
*** typescript
- compiles to javascript
- any type for escape
- deno run npm package with ~deno run --allow-all npm:SomeSuchCommand~ or a ts file with ~import express from "npm:express@^4.20"~
  - ~package.json~ scripts can be run with ~deno task~
  - based on v8
- bun run npm package
  - bun profile builds are debug and baseline exclude avx2
  - based on webkits javascriptcore
** DSL
*** [[https://github.com/open-goal/jak-project][GOAL]]
  - jak 1-3 lisp game implementation
*** [[id:6cb9147a-f7ca-4b2f-af98-14347eaba82f][docker]]
*** [[id:b8d0efc3-099f-4791-b65a-a168ff56aafd][gradle]]
** WASM
- sexp text format
- stack based vm instructions
- function table
- interoperability
  - js with SharedArrayBuffer
  - WASI for host
** [[id:a7f0c442-c2ec-4d7e-bc65-628631138d81][python]]
** asm
*** x86
- calling convention of setting registers and jumping
- SIMD (xmmx) SSE/AVX(512)
** [[id:bf21269e-5bf5-4c51-be58-4c040d905e25][zig]]
** lisp
*** scheme
  - [[id:d6237a00-1daa-4752-b311-1749950f4f6e][guile]]
  - prescheme
    - manual memory management
    - static type system
    - verified prescheme to C compiler
    - operating system 3L compiler/vm written in prescheme
    - guile-prescheme interop
  - gnu mes
    - scheme interpreter in C and C compiler in scheme used for bootstrapping guile/guix with gash
  - chicken scheme
    - scheme to C compiler
*** [[id:fd6e2c21-220f-4d63-ab7e-5004dc053e5b][clojure]]
*** elisp
- eieio for objects
