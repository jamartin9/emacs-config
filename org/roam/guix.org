:PROPERTIES:
:ID:       4e76d981-fd7c-43b0-9d8c-120386135729
:END:
#+title: guix
#+OPTIONS: toc:nil num:nil date:nil \n:nil html-style:nil author:nil timestamp:nil title:nil html-postamble:nil html5-fancy:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-default.css" />
#+HTML_CONTENT_CLASS: container
#+HTML_DOCTYPE: html5
#+INCLUDE: "css.org::navbar" :only-contents t

* Guix
** Link manifest
#+NAME: link-guix-el
#+BEGIN_SRC elisp :tangle guix.sh :shebang "\":\"; emacs -Q --script guix.sh -- $@ $args ; exit $? # -*- mode: emacs-lisp; lexical-binding: t; -*-"
(ignore-errors
(let* ((manifest-dir (file-name-as-directory (concat (file-name-as-directory (xdg-config-home)) "guix-manifests")))
        (manifest-dir-file (concat manifest-dir "user.scm")))
    (if (not (file-exists-p manifest-dir))
        (make-directory manifest-dir))
    (if (not (or (file-exists-p manifest-dir-file) (file-symlink-p manifest-dir-file)))
        (make-symbolic-link (concat (file-name-directory (or load-file-name buffer-file-name)) "user.scm") manifest-dir-file 1))))
#+END_SRC
** User manifest
#+NAME: manifest-scm
#+BEGIN_SRC scheme :tangle user.scm
  ;; Manifest for development env
  (specifications->manifest
   '(
     ;; basic
     ;;"shepherd" ;;"glibc-utf8-locales"

     ;;"ungoogled-chromium-nvda" "ublock-origin-chromium"
     ;;"firefox-nvda"; --with-graft=mesa=nvda
     ;;"torbrowser"

     ;;"deluge" ;;"transmission"
     ;;"nzbget"
     ;;"steam-nvidia" ;; steam
     ;;"zfs"
     "strace"
     "perf"
     "flamegraph"
     "bpftrace"
     "bcc"

     ;; C dev
     ;;"make" ;;"cmake"
     ;;"glibc" ;; "musl"
     ;;"gcc-toolchain" ;;"clang-toolchain"
     "gdb" ;;"lldb"
     ;;"rr"
     ;;"binutils"
     ;;"module-init-tools"
     ;;"msr-tools"

     ;; java
     ;;"openjdk"
     ;;"maven"
     ;;"leiningen"
     ;;"clojure"

     ;; python
     ;;"python"
     ;;"vapoursynth";; "ffms2"

     ;; shell
     ;;"shellcheck" ;;"bash"
     "htop"; Requires CAP_NET_ADMIN for PERCENT_*_DELAY
     ;;"bottom"
     ;;"xclip"
     ;;"wl-clipboard"
     ;;"bc"
     ;;"jq"
     ;;"coreutils" ;;"busybox"
     ;;"less"
     ;;"gzip"
     ;;"fdisk" ;;"gparted"
     ;;"wget"
     ;;"diffutils"
     ;;"findutils"
     ;;"tar"
     ;;"gawk"
     ;;"which"
     ;;"sed"
     ;;"grep"
     ;;"patch"
     ;;"gash"
     ;;"gash-utils"
     ;;"alacritty"
     ;;"xterm"
     "screen"
     "ripgrep"
     "fd"

     ;; apps
     ;;"wine64"; "wine"
     ;;"winetricks"
     ;;"clamav"
     ;;"filezilla"
     ;;"lynx"
     ;;"libvirt"
     ;;"virt-manager"
     ;;"postgresql"
     ;;"sqlite"
     ;;"tigervnc-client"
     ;;"tigervnc-server" ; newer gdm supports rdp login
     ;;"searx"
     ;;"gnuradio"
     ;;"obs"
     ;;"virt-viewer" "qemu"; remote-viewer for spice
     ;;"dino" ; xmpp client
     ;;"flatpak" ;"xdg-utils" "xdg-dbus-proxy"; "xdg-desktop-portal-gtk" ;"shared-mime-info"; "xorg-server-wayland" ;(list glib "bin")
     ;;"waypipe"

     ;; docs
     ;;"libreoffice"
     ;;"calibre"
     ;;"biber"
     ;;"texlive"
     ;;"kiwix-desktop"

     ;; media
     ;;"blender"
     ;;"gimp"
     ;;"inkscape"
     ;;"vlc"
     ;;"mkvtoolnix"
     ;;"mediainfo"
     ;;"ffmpeg"
     ;;"gnuplot"
     ;;"makemkv"
     ;;"yt-dlp"
     ;;"mpv"; MAYBE add guix package for mpv with libvdpau-nvidia from nvidia-libs nonguix

     ;; net
     ;;"curl"
     ;;"whois"
     ;;"bind:utils"
     ;;"nmap"
     ;;"python-stem"
     ;;"onionshare"
     ;;"iptables"
     ;;"ebtables"
     ;;"wireshark"
     ;;"netcat"
     ;;"net-tools"
     ;;"openssh" ;;"dropbear"
     ;;"wireguard-tools"
     ;;"socat"
     ;;"tor"
     ;;"torsocks"
     ;;"i2pd"
     ;;"dnsmasq"

     ;; Desktop
     ;;"notification-daemon"
     ;;"nvidia-driver"
     ))
#+END_SRC
** guix notes
- add ~(add-after 'install 'fail (lambda* (#:key outputs #:allow-other-keys) (exit 1)))~ in the ~modify-phases~ with -K to keep a copy of an otherwise working build directory
- https://git.genenetwork.org/guix-north-america/about/ for NA substitute server
- cuirass ci saves gc roots in ~/var/guix/gcroots/profiles/per-user/cuirass/cuirass~ for default of 30 days
  - can unlink and gc for space
- ~guix system image -t iso9660 ./installer.scm~
- ~GUIX_SANDBOX_EXTRA_MOUNTS=/path/to/extra/thing~ for guix steam
- transform options for source, c-toolchain, debug, grafts/inputs
  - ~--with-commit=SomeSuchPackage=XXX~
- ~-L ./guix-channel~ to use local channel changes
- ~guix pack -S /bin=bin -S /sbin=sbin --localstatedir -RR guix bash-static~
  - relocatable packs can be run without usernamespace support by setting the execution engine ex. ~export GUIX_EXECUTION_ENGINE=fakeroot~
- ~guix package --roll-back~ to drop to last version
- commit signing and downgrading flags are ~--disable-authentication --allow-downgrades~
- platform specific binaries can be produces with the ~--tune~ flag
- hpc channel for extra pytorch packages
  - https://gitlab.inria.fr/guix-hpc/guix-hpc/
  - misc channels https://git.sr.ht/~whereiseveryone/toys/log for services/packages (sops(secrets), cuda, android, rustup, lutris, ollama, tailscaled, jellyfin, tailwindcss-lsp, guile-lsp, goblins, etc)
- non root guix can be done through a series of env variables and flags
  - arg ~--listen=/socket~ and/or env vars
- app img run ~mount thing.AppImage tmpmnt -o offset=$(guix shell -C -F zlib -- "./thing.AppImage --appimage-offset")~
- guix shell can emulate normal fs with --emulate-fhs
- set package as GC root with ~ln --symbolic --force /path/to/guix/packagelink /var/guix/gcroots~ for guix copy
- download source with ~guix build -S PKG~
- search with ~rg -a -z "STR" /gnu/store/PKG.tar.gz~
  - Add ~$XDG_DATA_HOME/guix/bin~ to ~$PATH~
  - ~--disable-chroot~
- default source for user is ~$HOME/.guix-profile/etc/profile~ and ~$XDG_CONFIG_HOME/guix/etc/profile~
  - cleanup space with ~guix package -d && guix pull -d && guix gc~
  - os templates for qemu images with ~guix system image -t qcow2 --save-provenance~
    - guix system upgrade
      - ~ln -s /etc/channels.scm ~/.config/guix/channels.scm~
      - ~guix pull~ ~. ~/.config/guix/current/etc/profile~
      - ~sudo -E guix system reconfigure /etc/guix-os.scm~
    - run guix vm
      - ~qemu-system-x86_64 -nic user,model=virtio-net-pci,hostfwd=tcp::10022-:22 -enable-kvm -m 1024 -device virtio-blk,drive=myhd -drive if=none,file=$MY_IMAGE,id=myhd -spice port=5930,disable-ticketing~
    - grow vm disk
      - ~qemu-image resize IMAGE.qcow2 +10G~
      - ~growpart /dev/vda 2~
      - ~resize2fs /dev/vda2~
  - ~guix hash -xr .~ for the checksum of a repo
  - ~guix publish~ substitutes after exporting/importing key with ~guix archive~ or use nars with ~guix archive --export -r~
- packages are standard SRFI-9 guile records (set-fields, etc...)
- nonguix substitutes at ~substitutes.nonguix.org~ key is ~/signing-key.pub~.
- ~guix time-machine --commit=a4eae0c3adce8e4c4ac153a4959d18b9897a67e1 -- package -i old~
- manual setup script ~GUIX_BINARY_FILE_NAME=guix-binary.tar.xz ./guix-install.sh~ from https://guix.gnu.org/install.sh
- manual install image
  - create image with ~guix system image -t iso9660 ./jam/system/installer.scm~
    - ~dd if=file.iso of=/dev/sdX status=progress~
  - create wifi.conf with
#+NAME: guix-install-wifi
#+BEGIN_SRC conf :tangle no
network={
  ssid="ssid-name"
  key_mgmt=WPA-PSK
  psk="unencrypted passphrase"
}
#+END_SRC
  - ~rfkill unblock all && ifconfig -a && wpa_supplicant -c wifi.conf -i INTERFACE -B && dhclient -v INTERFACE~
  - update time with ~ntpdate pool.ntp.org~
    - if you need to install nss-certs/git set the profile and add gits libexec directory to the PATH
  - partition with ~lsblk && cfdisk~
  - format with mkfs
  - mount root as mnt and ~/boot/efi~ under ~/mnt/boot/efi~
    - ensure to have booted with uefi boot if installing efi and not legacy grub
  - swapon the device
  - ~herd start cow-store /mnt~
  - clone config, copy channels to ~~/.config/guix/~, ~guix pull --no-check-certificate~ then ~guix system -L CONFIG_DIR init config.scm /mnt~
#+NAME: guix-fhs-examples
#+BEGIN_SRC sh :tangle no
guix shell --container --network --emulate-fhs \
    --development ungoogled-chromium gcc:lib \
    --preserve='^DISPLAY$' \
    --preserve='^XAUTHORITY$' --expose=$XAUTHORITY \
    --preserve='^DBUS_' --expose=/var/run/dbus \
    --expose=/sys/dev --expose=/sys/devices --expose=/dev/dri \
    -- ./VSCodium-1.74.0.22342.glibc2.17-x86_64.AppImage --appimage-extract-and-run # Run VSCodium Appimage

guix shell --network --container --emulate-fhs \
    bash coreutils curl grep nss-certs gcc:lib gcc-toolchain \
    pkg-config glib cairo atk pango@1.48.10 gdk-pixbuf gtk+ git \
    --share=$HOME/temphome=$HOME --no-cwd

curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh # install rustup in guix

guix shell --container --network --emulate-fhs \
    --preserve='^DISPLAY$' \
    --preserve='^XAUTHORITY$' --expose=$XAUTHORITY \
    alsa-lib bash coreutils dbus-glib file gcc:lib \
    grep gtk+ libcxx pciutils sed \
    -- ./start-tor-browser.desktop -v ; # Start tor-browser
#+END_SRC

#+NAME: guix-env-vars
#+BEGIN_SRC sh :tangle no
GUIX_DAEMON_SOCKET=$XDG_DATA_HOME/guix/var/guix/daemon-socket/socket
GUIX_DATABASE_DIRECTORY=$XDG_DATA_HOME/guix/var/guix/db
GUIX_LOG_DIRECTORY=$XDG_DATA_HOME/guix/var/log/guix
GUIX_STATE_DIRECTORY=$XDG_DATA_HOME/guix/var/guix
GUIX_CONFIGURATION_DIRECTORY=$XDG_CONFIG_HOME/guix/etc
GUIX_LOCPATH=$XDG_DATA_HOME/guix/var/guix/profiles/per-user/root/guix-profile/lib/locale
NIX_STORE=$XDG_DATA_HOME/guix/gnu/store
#+END_SRC

#+NAME: guix-sheperd-home-services
#+BEGIN_SRC guile :tangle no

  (define guix-service ; add type for portable guix package
    (shepherd-service
     (provision '(guix))
     (start #~(make-forkexec-constructor `("guix-daemon" ,(string-append "--listen=" (if (getenv "XDG_DATA_HOME") (getenv "XDG_DATA_HOME")
                                                                                         (string-append (getenv "HOME")
                                                                                                        file-name-separator-string
                                                                                                        ".local"
                                                                                                        file-name-separator-string
                                                                                                        "share"))
                                                                         file-name-separator-string
                                                                         "guix"
                                                                         file-name-separator-string
                                                                         "var"
                                                                         file-name-separator-string
                                                                         "guix"
                                                                         file-name-separator-string
                                                                         "daemon-socket"
                                                                         file-name-separator-string
                                                                         "socket") ;;"--build-users-group=guixbuild"
                                           "--disable-chroot")
                                         #:environment-variables `(,(string-append "NIX_STORE=" (if (getenv "XDG_DATA_HOME")
                                                                                                   (getenv "XDG_DATA_HOME")
                                                                                                    (string-append (getenv "HOME")
                                                                                                                   file-name-separator-string
                                                                                                                   ".local"
                                                                                                                   file-name-separator-string
                                                                                                                   "share"))
                                                                                   file-name-separator-string
                                                                                   "guix"
                                                                                   file-name-separator-string
                                                                                   "gnu"
                                                                                   file-name-separator-string
                                                                                   "store")
                                                                   ,@(environ))))
     (stop #~(make-kill-destructor))
     (auto-start? #f)))

  (define ssh-service ; writes to /etc/dropbear for keys
    (set-fields       ; least-authority-wrapper or fork+exec-command/container or run-container to contain
     (car ((@@ (gnu services ssh) dropbear-shepherd-service) (dropbear-configuration (port-number 2222)
                                                                                     (syslog-output? #f)
                                                                                     (password-authentication? #f)
                                                                                     (pid-file "/tmp/dropbear.pid"))))
     ((shepherd-service-requirement) '())
     ((shepherd-service-auto-start?) #f)))
#+END_SRC
