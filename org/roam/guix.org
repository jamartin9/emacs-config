:PROPERTIES:
:ID:       4e76d981-fd7c-43b0-9d8c-120386135729
:END:
#+title: guix
#+OPTIONS: toc:nil num:nil date:nil \n:nil html-style:nil author:nil timestamp:nil title:nil html-postamble:nil html5-fancy:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-default.css" />
#+HTML_CONTENT_CLASS: container content
#+HTML_DOCTYPE: html5
#+INCLUDE: "css.org::navbar" :only-contents t

* Guix
** Link manifest and channels
#+NAME: link-guix-el
#+BEGIN_SRC elisp :tangle guix.sh :shebang "\":\"; emacs -Q --script guix.sh -- $@ $args ; exit $? # -*- mode: emacs-lisp; lexical-binding: t; -*-"
(ignore-errors
(let* ((manifest-dir (file-name-as-directory (concat (file-name-as-directory (xdg-config-home)) "guix-manifests")))
        (manifest-dir-file (concat manifest-dir "user.scm")))
    (if (not (file-exists-p manifest-dir))
        (make-directory manifest-dir))
    (if (not (or (file-exists-p manifest-dir-file) (file-symlink-p manifest-dir-file)))
        (make-symbolic-link (concat (file-name-directory (or load-file-name buffer-file-name)) "user.scm") manifest-dir-file 1))))
#+END_SRC
** guix home
#+NAME: home-scm
#+BEGIN_SRC scheme :tangle home.scm :noweb yes
  (use-modules (gnu home)
               (gnu home services)
               (gnu home services guix)
               (gnu home services shells)
               (gnu home services shepherd)
               (gnu services)
               (gnu services ssh)
               (gnu services shepherd)
               (gnu packages)
               (gnu packages admin)
               (srfi srfi-9 gnu)
               (guix channels)
               (gnu packages emacs-xyz)
               (jam packages emacs-xyz)
               (jam packages emacs)
               (guix gexp))

  (define emacs-service
    (shepherd-service
     (provision '(emacs))
     (start #~(make-system-constructor "emacs --daemon"))
     (stop #~(make-system-destructor "emacsclient --eval '(kill-emacs)'"))
     (auto-start? #f)))

  (define guix-service ; add type for portable guix package
    (shepherd-service
     (provision '(guix))
     (start #~(make-forkexec-constructor `("guix-daemon" ,(string-append "--listen=" (if (getenv "XDG_DATA_HOME") (getenv "XDG_DATA_HOME")
                                                                                         (string-append (getenv "HOME")
                                                                                                        file-name-separator-string
                                                                                                        ".local"
                                                                                                        file-name-separator-string
                                                                                                        "share"))
                                                                         file-name-separator-string
                                                                         "guix"
                                                                         file-name-separator-string
                                                                         "var"
                                                                         file-name-separator-string
                                                                         "guix"
                                                                         file-name-separator-string
                                                                         "daemon-socket"
                                                                         file-name-separator-string
                                                                         "socket") ;;"--build-users-group=guixbuild"
                                           "--disable-chroot")
                                         #:environment-variables `(,(string-append "NIX_STORE=" (if (getenv "XDG_DATA_HOME")
                                                                                                    (getenv "XDG_DATA_HOME")
                                                                                                    (string-append (getenv "HOME")
                                                                                                                   file-name-separator-string
                                                                                                                   ".local"
                                                                                                                   file-name-separator-string
                                                                                                                   "share"))
                                                                                   file-name-separator-string
                                                                                   "guix"
                                                                                   file-name-separator-string
                                                                                   "gnu"
                                                                                   file-name-separator-string
                                                                                   "store")
                                                                   ,@(environ))))
     (stop #~(make-kill-destructor))
     (auto-start? #f)))

  (define ssh-service ; writes to /etc/dropbear for keys
    (set-fields       ; make-forkexec-constructor/container to contain
     (car ((@@ (gnu services ssh) dropbear-shepherd-service) (dropbear-configuration (port-number 2222)
                                                                                     (syslog-output? #f)
                                                                                     (password-authentication? #f)
                                                                                     (pid-file "/tmp/dropbear.pid"))))
     ((shepherd-service-requirement) '())
     ((shepherd-service-auto-start?) #f)))

  (home-environment
   (packages (append
            ;(map transform-emacs-build-git (list emacs-fd))
            (map specification->package (list "guile"
                                             ;"emacs-pgtk-xwidgets" ; managed by default profile
                                             ;"ripgrep" ;"fd"
                                             "git"
                                             "nss-certs"
                                             "aspell-dict-en"
                                             ;"mpv"; "vlc"; MAYBE add guix package for mpv/vlc with libvdpau-nvidia from nvidia-libs nonguix
                                             "gnupg"
                                             "password-store" "pass-otp"
                                             ;"virt-viewer" ; "qemu"; for spice remote-viewer
                                             ;"alacritty"; "xterm" ; MAYBE add guix package for alacritty with nvidia-libs
                                             "curl"; emacs-osm needs for CA's
                                             "screen"
                                             "emacs-eat" "emacs-debbugs" "emacs-org-roam" "emacs-rmsbolt" "emacs-guix" "emacs-osm" "emacs-minions" "emacs-transmission" "emacs-undo-tree" "emacs-pass" "emacs-password-store-otp" "emacs-code-review" "emacs-company" "emacs-which-key" "emacs-pcre2el" "emacs-macrostep-geiser" "emacs-geiser-guile" "emacs-flymake-guile" "emacs-rust-mode" "emacs-yaml-mode" "emacs-pyvenv";"emacs-esup" "emacs-explain-pause-mode"
                                             ))))
   (services
    (list
     (simple-service 'my-channel-services
                     home-channels-service-type
                     <<guixchannels-scm>>
                     )
     (service home-shepherd-service-type (home-shepherd-configuration
                                          (shepherd (specification->package "shepherd"))
                                          ;(auto-start? #f)
                                          (services (list emacs-service
                                                          ;transmission-service
                                                          ;ssh-service
                                                          ;guix-service
                                                          ))))

     (service home-bash-service-type
              (home-bash-configuration
               (package (specification->package "bash"))
               (guix-defaults? #f)
               ;(environment-variables (list '("EDITOR" . "emacs")))
               (bashrc (list (plain-file "guix.alias" "\
  #!/usr/bin/env bash
  # shellcheck disable=SC2155,SC2076,SC2068,SC1090,SC1091

  export TMPDIR=\"/tmp\"

  export HISTFILE=\"${XDG_STATE_HOME}\"/bash/history

  export CARGO_HOME=\"${XDG_DATA_HOME}\"/cargo
  export RUSTUP_HOME=\"${XDG_DATA_HOME}\"/rustup
  export GNUPGHOME=\"${XDG_DATA_HOME}\"/gnupg
  export PASSWORD_STORE_DIR=\"${XDG_DATA_HOME}\"/pass

  export CUDA_CACHE_PATH=\"${XDG_CACHE_HOME}\"/nv
  export ICEAUTHORITY=\"${XDG_CACHE_HOME}\"/ICEauthority
  export TEXMFVAR=\"${XDG_CACHE_HOME}\"/texlive/texmf-var

  export GPG_TTY=$(tty)

  export EDITOR=\"emacs\"
  alias emacsc=\"emacsclient -c -a ''\"
  alias emacskill=\"emacsc -e '(kill-emacs)'\"
  _emacs_run_dump(){
      if [ ! -f ~/emp.dmp ]; then
          emacs --batch --eval='(dump-emacs-portable \"~/emp.dmp\")'
      fi
      emacs --dump-file=~/emp.dmp $@
  }
  alias emrd=\"_emacs_run_dump\"

  # Guix parts
  alias guixPack=\"guix pack -S /bin=bin -RR\"
  alias guixPackDock=\"guix pack -S /bin=bin -f docker\"
  alias guixPackVm=\"guix system image -t qcow2\" # qemu-img resize x.qcow +10G boot then growpart and resize2fs

  _guix_run_vm(){
      local vmOpts=()
      local qOpts=()
      local target=\"\"
      while [ $# -gt 0 ]; do
          local arg=\"${1}\"
          case \"${arg}\" in
              -d|--default)
                  qOpts=(\"-spice\" \"port=5930,disable-ticketing\" \"-m\" \"2048\" \"-nic\" \"user,model=virtio-net-pci,hostfwd=tcp::8080-:8081\" \"${qOpts[@]}\")
                  vmOpts=(\"--share=$HOME/tmp=/storage\" \"${vmOpts[@]}\") # --persistent
                  shift
                  ;;
              -qo|--qopt)
                  qOpts=(\"${qOpts[@]}\" \"${2}\")
                  shift 2
                  ;;
              -t|--target)
                  target=\"${2}\"
                  shift 2
                  ;;
              -vo|--vmopt)
                  vmOpts=(\"${vmOpts[@]}\" \"${2}\" )
                  shift 2
                  ;;
              ,*)
                  printf 'Invalid option %s \n' \"${1}\"
                  printf 'Valid options are: -t OS.scm -qo QEMU-OPTS -vo GUIXVM-OPTS --default \n'
                  shift
                  ;;
          esac
      done
      $(guix system vm \"${vmOpts[@]}\" \"${target}\") \"${qOpts[@]}\"
  }
  alias guixRunVm=\"_guix_run_vm\" # guixRunVm -d -t os.scm

  _guix_vars(){
      if [ -z \"${GUIX_PREV_ENV}\" ]; then # unset vars in guix-home and keep login vars
          export GUIX_PREV_ENV=(\"$(env -u PATH -u GUIX_PROFILE -u GUILE_LOAD_COMPILED_PATH -u GUILE_LOAD_PATH -u SSL_CERT_DIR -u SSL_CERT_FILE -u GIT_EXEC_PATH -u GIT_SSL_CAINFO -u INFOPATH -u EMACSLOADPATH -u EMACSNATIVELOADPATH -u BASH_LOADABLES_PATH -u PASSWORD_STORE_SYSTEM_EXTENSION_DIR -u CURL_CA_BUNDLE PATH=/sbin:/bin:/usr/sbin:/usr/bin bash -c '. /etc/profile && env')\")
          export GUIX_ACTIVE_PROFILES=()
          # guix-home activated with login shell
          [ -f ~/.guix-home/setup-environment ] && export GUIX_PREV_ENV_home=(\"$(env)\") && export GUIX_ACTIVE_PROFILES=(\"home\")
      fi
      if [ -z \"${GUIX_MANIFEST_DIR}\" ]; then
          export GUIX_MANIFEST_DIR=${XDG_CONFIG_DIR:-~/.config}/guix-manifests
      fi
      if [ -z \"${GUIX_EXTRA_PROFILES}\" ]; then
          export GUIX_EXTRA_PROFILES=${XDG_DATA_HOME:-~/.local/share}/guix-extra-profiles
      fi
  }
  _guix_list_profiles(){
      printf \"The following profiles are available: \n\"
      if [ -f ~/.guix-profile/etc/profile ]; then
          printf \"default \n\"
      fi
      if [ -f ~/.guix-home/profile/etc/profile ]; then
          printf \"home \n\"
      fi
      for manifest in \"${GUIX_MANIFEST_DIR}\"/*.scm; do
          if [ \"${manifest}\" != \"${GUIX_MANIFEST_DIR}/*.scm\" ]; then # no glob
              printf '%s \n' \"$(basename \"${manifest%.*}\")\"
          fi
      done
      printf \"The following profiles are active: \n\"
      for prof in ${GUIX_ACTIVE_PROFILES[@]}; do
          printf '%s \n' \"${prof}\"
      done

  }
  _guix_update_profile(){
      local arg=\"${1}\"
      local profile=\"${GUIX_EXTRA_PROFILES}/${arg}/${arg}\"
      if [ \"${arg}\" = \"default\" ]; then
          guix package -u
      elif [ \"${arg}\" = \"home\" ]; then
           guix home reconfigure ~/.guix-home/configuration.scm
      elif [ -f \"${GUIX_MANIFEST_DIR}/${arg}.scm\" ]; then
           if [ ! -d \"${profile}\" ]; then
              mkdir -p \"${GUIX_EXTRA_PROFILES}/${arg}\"
           fi
           guix package -m \"${GUIX_MANIFEST_DIR}/${arg}.scm\" -p \"${profile}\"
      fi
  }
  _guix_activate_profile(){
      local arg=\"${1}\"
      local profile=\"${GUIX_EXTRA_PROFILES}/${arg}/${arg}\"
      if [ \"${arg}\" != \"default\" ] &&
         [ \"${arg}\" != \"home\" ] &&
         [ ! -f \"${profile}\"/etc/profile ]; then # home and default are always installed
          _guix_update_profile \"${arg}\"
      fi
      if [ \"${arg}\" = \"default\" ]; then # unset GUIX_PROFILE so path proliferates
          [ -f ~/.guix-profile/etc/profile ] && unset GUIX_PROFILE && . ~/.guix-profile/etc/profile
          [ -f ~/.config/guix/current/etc/profile ] && unset GUIX_PROFILE && . ~/.config/guix/current/etc/profile
      elif [ \"${arg}\" = \"home\" ]; then # tilde avoids variables
          [ -f ~/.guix-home/setup-environment ] && . ~/.guix-home/setup-environment && export GUIX_PROFILE
      elif [ -f \"${profile}\"/etc/profile ]; then
          unset GUIX_PROFILE && . \"${profile}\"/etc/profile
      else
          printf 'The manifest for %s does not exist \n' \"${arg}\"
          return
      fi
      local stash=(\"${GUIX_PREV_ENV[@]}\") # hide prev envs from being saved in new GUIX_PREV_ENV_$manifest
      unset GUIX_PREV_ENV
      for mani in ${GUIX_ACTIVE_PROFILES[@]}; do
          local ref=\"GUIX_PREV_ENV_${mani}[@]\"
          local \"stash_${mani}=${!ref}\" # MAYBE indirect variable expansion portable
          unset \"GUIX_PREV_ENV_${mani}\"
      done
      local prev=(\"$(env)\") # save current env
      export \"GUIX_PREV_ENV_${arg}=${prev[*]}\"
      export GUIX_PREV_ENV=(\"${stash[@]}\") # restore prev envs
      for mani in ${GUIX_ACTIVE_PROFILES[@]}; do
          local ref_stash=\"stash_${mani}\"
          export \"GUIX_PREV_ENV_${mani}=${!ref_stash}\" # MAYBE indirect variable expansion portable
      done
      GUIX_ACTIVE_PROFILES+=(\"${arg}\")
      export GUIX_ACTIVE_PROFILES
  }
  _guix_deactivate_profile(){
      local arg=\"${1}\"
      local ref=\"GUIX_PREV_ENV_${arg}\"
      if [ -n \"${!ref}\" ]; then # the prev env exists # MAYBE indirect variable expansion portable
          for entry in ${!ref}; do # unset vars of profile # MAYBE indirect variable expansion portable
              if [[ ! \"${entry%%=*}\" =~ GUIX_PREV_ENV.* ]] &&
                 [ \"${entry%%=*}\" != \"GUIX_ACTIVE_PROFILES\" ] ;then
                  unset \"${entry%%=*}\"
              fi
          done
          unset \"GUIX_PREV_ENV_${arg}\"
          local prev_entry
          for entry in ${GUIX_PREV_ENV[@]}; do # restore init env
              if [[ ! \"${entry}\"  =~ \"=\" ]]; then # append onto the prev_entry for the space seperated args without equality assignment
                  prev_entry=\"${prev_entry} ${entry}\"
                  export \"${prev_entry?}\"
              else
                  prev_entry=\"${entry}\"
                  export \"${entry%%=*}=${entry#*=}\"
              fi
          done
          # active manifests again
          local active_stash=(\"${GUIX_ACTIVE_PROFILES[@]}\") # export GUIX_ACTIVE_PROFILES=(\"${GUIX_ACTIVE_PROFILES[@]/$arg}\")
          export GUIX_ACTIVE_PROFILES=() # unset profiles so GUIX_PREV_ENV_${manifest} will not be saved
          for mani in ${active_stash[@]}; do
              if [ \"${mani}\" != \"${arg}\" ]; then
                  unset \"GUIX_PREV_ENV_${mani}\" # prevent all GUIX_PREV_ENV_${manifest}'s from being saved
              fi
          done
          for mani in ${active_stash[@]}; do
              if [ \"${mani}\" != \"${arg}\" ]; then
                  _guix_activate_profile \"${mani}\"
              fi
          done
      fi
  }
  _guix_opts(){
      local help=\"
       Takes a list of profile manifest shortnames/commands
       GUIX_MANIFEST_DIR will be set to ${XDG_CONFIG_DIR:-~/.config}/guix-manifests when not set
       GUIX_EXTRA_PROFILES will be set to ${XDG_DATA_HOME:-~/.local/share}/guix-extra-profiles when not set
       GUIX_ACTIVE_PROFILES will be set to the profiles that are activated (in order)
       GUIX_PREV_ENV will be set to contents of env without guix profiles
       GUIX_PREV_ENV_shortname will be set to the contents of env with the profile
       The shortname is the basename
       GUIX_MANIFEST_DIR/shortname.scm is the format of manifest search path
       Profiles besides home/default will be stored under: GUIX_EXTRA_PROFILES/shortname/shortname
       The commands are activate, update, deactivate and list; activate is the default
       -a|--activate shortname -> sources/installs profile; appends to GUIX_ACTIVE_PROFILES
       -d|--deactivate shortname -> restore env before the profile was activated
       -u|--update shortname -> guix package upgrades profile
       -l|--list -> print the contents of GUIX_ACTIVE_PROFILES and GUIX_MANIFEST_DIR (as shortnames)
       -h|--help -> print this message
  \"
      _guix_vars
      while [ $# -gt 0 ]; do
          local arg=\"${1}\"
          case \"${arg}\" in
              -a|--activate)
                  if [[ \" ${GUIX_ACTIVE_PROFILES[*]} \" =~ \" ${2} \" ]]; then
                      printf '%s is already active \n' \"${2}\"
                  else
                      _guix_activate_profile \"${2}\"
                  fi
                  shift 2
                  ;;
              -d|--deactivate)
                  if [[ \" ${GUIX_ACTIVE_PROFILES[*]} \" =~ \" ${2} \" ]]; then
                      _guix_deactivate_profile \"${2}\"
                      cd . # restore ps1 prompt dir/info
                  else
                      printf '%s is not active \n' \"${2}\"
                  fi
                  shift 2
                  ;;
              -h|--help)
                  printf '%s' \"${help}\"
                  shift
                  ;;
              -l|--list)
                  _guix_list_profiles
                  shift
                  ;;
              -u|--update)
                  _guix_update_profile \"${2}\"
                  shift 2
                  ;;
              ,*)
                  if [[ \" ${GUIX_ACTIVE_PROFILES[*]} \" =~ \" ${1} \" ]]; then
                      printf '%s is already active \n' \"${1}\"
                  else
                      _guix_activate_profile \"${1}\"
                  fi
                  shift
                  ;;
          esac
      done
  }
  alias guixProf=_guix_opts
  _guix_opts default"))))))))
#+END_SRC

** guixsd config
#+NAME: guix-os
#+BEGIN_SRC scheme :tangle guix-os.scm
  (use-modules
   (gnu)
   (gnu services)
   (gnu services linux)
   (gnu services shepherd)
   (gnu services file-sharing)
   (gnu services networking)
   (gnu services sysctl)
   (gnu services vpn)
   (gnu packages networking)
   (gnu packages containers)
   (guix)
   (guix gexp)
   (guix packages)
   (srfi srfi-1)
   (jam packages zfs)
   (nongnu packages linux)
   (nongnu system linux-initrd)
   )

  (use-service-modules desktop mcron networking spice ssh xorg sddm cuirass)
  (use-package-modules bootloaders certs fonts nvi
                       package-management wget xorg
                       ;; ZFS
                       linux file-systems admin)
  ;; broadcom service
  (define broadcom-service-type
    (service-type
     (name 'broadcom)
     (extensions
      (list
       ;; add kernel module
       (service-extension linux-loadable-module-service-type
                                 (const (list broadcom-sta)))
        ;; load kernel module
       (service-extension kernel-module-loader-service-type
                                 (const '("wl")))))
     (default-value '())
     (description "Install broadcom kernel module and service")))
  ;; * MAYBE guix nvidia-driver(xorg/ko), tor/i2p service

  (define my-kernel (corrupt-linux linux-libre-with-bpf #:configs '("CONFIG_DEBUG_INFO_BTF=y")))

  ;; Source: <https://github.com/Kicksecure/security-misc> via https://github.com/rakino/Testament/blob/trunk/testament/kicksecure.scm
  ;; Extracted with the following command:
  ;; cat etc/default/grub.d/* | sed -e 's/#\+/;;/g' -e 's/GRUB.*DEFAULT /\"/g' -e 's/GRUB.*LINUX /\"/g' -e '/GRUB/d' -e 's/\(\".*[a-z0-9]\)\ \([a-z].*\"\)/\1\"\n\"\2/g' -e '/dpkg/d'
  (define %kicksecure-kernel-arguments
  '(;; Enables all known mitigations for CPU vulnerabilities.
    ;;
    ;; https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/index.html
    ;; https://forums.whonix.org/t/should-all-kernel-patches-for-cpu-bugs-be-unconditionally-enabled-vs-performance-vs-applicability/7647

    ;; Enable mitigations for Spectre variant 2 (indirect branch speculation).
    ;;
    ;; https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/spectre.html
    "spectre_v2=on"

    ;; Disable Speculative Store Bypass.
    "spec_store_bypass_disable=on"

    ;; Enable mitigations for the L1TF vulnerability through disabling SMT
    ;; and L1D flush runtime control.
    ;;
    ;; https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/l1tf.html
    "l1tf=full,force"

    ;; Enable mitigations for the MDS vulnerability through clearing buffer cache
    ;; and disabling SMT.
    ;;
    ;; https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/mds.html
    "mds=full,nosmt"

    ;; Patches the TAA vulnerability by disabling TSX and enables mitigations using
    ;; TSX Async Abort along with disabling SMT.
    ;;
    ;; https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/tsx_async_abort.html
    "tsx=off"
    "tsx_async_abort=full,nosmt"

    ;; Mark all huge pages in the EPT as non-executable to mitigate iTLB multihit.
    ;;
    ;; https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/multihit.html
    "kvm.nx_huge_pages=force"

    ;; Enables mitigations for SRBDS to prevent MDS attacks on RDRAND and RDSEED instructions.
    ;; Only mitigated through microcode updates from Intel.
    ;;
    ;; https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/special-register-buffer-data-sampling.html
    ;; https://access.redhat.com/solutions/5142691

    ;; Force disable SMT as it has caused numerous CPU vulnerabilities.
    ;; The only full mitigation of cross-HT attacks is to disable SMT.
    ;;
    ;; https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/core-scheduling.html
    ;; https://forums.whonix.org/t/should-all-kernel-patches-for-cpu-bugs-be-unconditionally-enabled-vs-performance-vs-applicability/7647/17
    "nosmt=force";; MAYBE disable for perf

    ;; Enables the prctl interface to prevent leaks from L1D on context switches.
    ;;
    ;; https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/l1d_flush.html
    "l1d_flush=on"

    ;; Mitigates numerous MMIO Stale Data vulnerabilities and disables SMT.
    ;;
    ;; https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/processor_mmio_stale_data.html
    "mmio_stale_data=full,nosmt"
    ;; Copyright (C) 2019 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
    ;; See the file COPYING for copying conditions.

    ;; Distrusts the bootloader for initial entropy at boot.
    ;;
    ;; https://lkml.org/lkml/2022/6/5/271
    "random.trust_bootloader=off"
    ;; Copyright (C) 2019 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
    ;; See the file COPYING for copying conditions.

    ;; Distrusts the CPU for initial entropy at boot as it is not possible to
    ;; audit, may contain weaknesses or a backdoor.
    ;;
    ;; https://en.wikipedia.org/wiki/RDRAND;;Reception
    ;; https://twitter.com/pid_eins/status/1149649806056280069
    ;; https://archive.nytimes.com/www.nytimes.com/interactive/2013/09/05/us/documents-reveal-nsa-campaign-against-encryption.html
    ;; https://forums.whonix.org/t/entropy-config-random-trust-cpu-yes-or-no-rng-core-default-quality/8566
    ;; https://lkml.org/lkml/2022/6/5/271
    "random.trust_cpu=off"
    ;; Copyright (C) 2019 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
    ;; See the file COPYING for copying conditions.

    ;; Enables IOMMU to prevent DMA attacks.
    "intel_iommu=on"
    "amd_iommu=on"

    ;; Disable the busmaster bit on all PCI bridges during very
    ;; early boot to avoid holes in IOMMU.
    ;;
    ;; https://mjg59.dreamwidth.org/54433.html
    ;; https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=4444f8541dad16fefd9b8807ad1451e806ef1d94
    "efi=disable_early_pci_dma"

    ;; Enables strict enforcement of IOMMU TLB invalidation so devices will never be able to access stale data contents
    ;; https://github.com/torvalds/linux/blob/master/drivers/iommu/Kconfig;;L97
    ;; Page 11 of https://lenovopress.lenovo.com/lp1467.pdf
    "iommu.passthrough=0"
    "iommu.strict=1"
    ;; Copyright (C) 2019 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
    ;; See the file COPYING for copying conditions.

    ;;echo ";; kver: $kver"

    ;; Disables the merging of slabs of similar sizes.
    ;; Sometimes a slab can be used in a vulnerable way which an attacker can exploit.
    "slab_nomerge"

    ;; Enables sanity checks (F) and redzoning (Z).
    ;; Disabled due to kernel deciding to implicitly disable kernel pointer hashing
    ;; https://github.com/torvalds/linux/commit/792702911f581f7793962fbeb99d5c3a1b28f4c3
    ;;"slub_debug=FZ"

    ;; Zero memory at allocation and free time.
    "init_on_alloc=1"
    "init_on_free=1"

    ;; Machine check exception handler decides whether the system should panic or not based on the exception that happened.
    ;; https://forums.whonix.org/t/kernel-hardening/7296/494
    ;;"mce=0"

    ;; Enables Kernel Page Table Isolation which mitigates Meltdown and improves KASLR.
    "pti=on"

    ;; Vsyscalls are obsolete, are at fixed addresses and are a target for ROP.
    "vsyscall=none"

    ;; Enables page allocator freelist randomization.
    "page_alloc.shuffle=1"

    ;; Enables randomisation of the kernel stack offset on syscall entries (introduced in kernel 5.13).
    ;; https://lkml.org/lkml/2019/3/18/246
    "randomize_kstack_offset=on"

    ;; Enables kernel lockdown.
    ;;
    ;; Disabled for now as it enforces module signature verification which breaks
    ;; too many things.
    ;; https://forums.whonix.org/t/enforce-kernel-module-software-signature-verification-module-signing-disallow-kernel-module-loading-by-default/7880
    ;;
    ;;  "lockdown=confidentiality"
    ;;fi

    ;; Gather more entropy during boot.
    ;;
    ;; Requires linux-hardened kernel patch.
    ;; https://github.com/anthraxx/linux-hardened
    "extra_latent_entropy"

    ;; Restrict access to debugfs since it can contain a lot of sensitive information.
    ;; https://lkml.org/lkml/2020/7/16/122
    ;; https://github.com/torvalds/linux/blob/fb1201aececc59990b75ef59fca93ae4aa1e1444/Documentation/admin-guide/kernel-parameters.txt;;L835-L848
    ;"debugfs=off";; MAYBE disable as guix has debugfs on by default

    ;; Force the kernel to panic on "oopses" (which may be due to false positives)
    ;; https://forums.whonix.org/t/set-oops-panic-kernel-parameter-or-kernel-panic-on-oops-1-sysctl-for-better-security/7713
    ;; Implemented differently:
    ;; /usr/libexec/security-misc/panic-on-oops
    ;; /etc/X11/Xsession.d/50panic_on_oops
    ;; /etc/sudoers.d/security-misc
    ;;"oops=panic"
    ;; Copyright (C) 2019 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
    ;; See the file COPYING for copying conditions.

    ;; Prevent kernel info leaks in console during boot.
    ;; https://phabricator.whonix.org/T950

    ;; LANG=C str_replace is provided by package helper-scripts.

    ;; The following command actually removed "quiet" from the kernel command line.
    ;; If verbosity is desired, the user might want to keep this line.
    ;; Remove "quiet" from "because "quiet" must be first.

    ;; If verbosity is desired, the user might want to out-comment the following line.
    "quiet"
    "loglevel=0"

    ;; NOTE:
    ;; After editing this file, running:
    ;; sudo update-grub
    ;; is required.
    ;;
    ;; If higher verbosity is desired, the user might also want to delete file
    ;; /etc/sysctl.d/30_silent-kernel-printk.conf
    ;; (or out-comment its settings).
    ;;
    ;; Alternatively, the user could consider to install the debug-misc package,
    ;; which will undo the settings found here.
    ))

  ;; Source <https://github.com/Kicksecure/security-misc>>
  ;; Extracted with the following command:
  ;; cat etc/sysctl.d/* | sed -e 's/#\+/;;/g' -e 's/ = /=/g' -e 's/;;\(.*\..*\)=\(.*\)/;; ("\1" . "\2")/g' -e 's/\(.*\..*\)=\(.*\)/("\1" . "\2")/g' -e 's@/bin\|/usr/bin@/run/current-system/profile/bin@g'
  (define %kicksecure-sysctl-rules
  '(;; Copyright (C) 2019 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
    ;; See the file COPYING for copying conditions.

    ;; Disables coredumps. This setting may be overwritten by systemd so this may not be useful.
    ;; security-misc also disables coredumps in other ways.
    ("kernel.core_pattern" . "|/run/current-system/profile/bin/false")

    ;; Restricts the kernel log to root only.
    ("kernel.dmesg_restrict" . "1")

    ;; Don't allow writes to files that we don't own
    ;; in world writable sticky directories, unless
    ;; they are owned by the owner of the directory.
    ("fs.protected_fifos" . "2")
    ("fs.protected_regular" . "2")

    ;; Only allow symlinks to be followed when outside of
    ;; a world-writable sticky directory, or when the owner
    ;; of the symlink and follower match, or when the directory
    ;; owner matches the symlink's owner.
    ;;
    ;; Prevent hardlinks from being created by users that do not
    ;; have read/write access to the source file.
    ;;
    ;; These prevent many TOCTOU races.
    ("fs.protected_symlinks" . "1")
    ("fs.protected_hardlinks" . "1")

    ;; Hardens the BPF JIT compiler and restricts it to root.
    ("kernel.unprivileged_bpf_disabled" . "1")
    ("net.core.bpf_jit_harden" . "2")

    ;; Hides kernel addresses in various files in /proc.
    ;; Kernel addresses can be very useful in certain exploits.
    ;;
    ;; https://kernsec.org/wiki/index.php/Bug_Classes/Kernel_pointer_leak
    ("kernel.kptr_restrict" . "2")

    ;; Restricts the use of ptrace to root. This might break some programs running under WINE.
    ;; A workaround for WINE would be to give the wineserver and wine-preloader ptrace capabilities. This can be done by running:
    ;;
    ;; sudo apt-get install libcap2-bin
    ;; sudo setcap cap_sys_ptrace=eip /run/current-system/profile/bin/wineserver
    ;; sudo setcap cap_sys_ptrace=eip /run/current-system/profile/bin/wine-preloader
    ("kernel.yama.ptrace_scope" . "2")

    ;; Prevent setuid processes from creating coredumps.
    ("fs.suid_dumpable" . "0")

    ;; Randomize the addresses for mmap base, heap, stack, and VDSO pages
    ("kernel.randomize_va_space" . "2")

    ;; meta start
    ;; project Kicksecure
    ;; category networking and security
    ;; description
    ;; TCP/IP stack hardening

    ;; Protects against time-wait assassination.
    ;; It drops RST packets for sockets in the time-wait state.
    ("net.ipv4.tcp_rfc1337" . "1")

    ;; Disables ICMP redirect acceptance.
    ("net.ipv4.conf.all.accept_redirects" . "0")
    ("net.ipv4.conf.default.accept_redirects" . "0")
    ("net.ipv4.conf.all.secure_redirects" . "0")
    ("net.ipv4.conf.default.secure_redirects" . "0")
    ("net.ipv6.conf.all.accept_redirects" . "0")
    ("net.ipv6.conf.default.accept_redirects" . "0")

    ;; Disables ICMP redirect sending.
    ("net.ipv4.conf.all.send_redirects" . "0")
    ("net.ipv4.conf.default.send_redirects" . "0")

    ;; Ignores ICMP requests.
    ("net.ipv4.icmp_echo_ignore_all" . "1")
    ("net.ipv6.icmp.echo_ignore_all" . "1")

    ;; Ignores bogus ICMP error responses
    ("net.ipv4.icmp_ignore_bogus_error_responses" . "1")

    ;; Enables TCP syncookies.
    ("net.ipv4.tcp_syncookies" . "1")

    ;; Disable source routing.
    ("net.ipv4.conf.all.accept_source_route" . "0")
    ("net.ipv4.conf.default.accept_source_route" . "0")
    ("net.ipv6.conf.all.accept_source_route" . "0")
    ("net.ipv6.conf.default.accept_source_route" . "0")

    ;; Enable reverse path filtering to prevent IP spoofing and
    ;; mitigate vulnerabilities such as CVE-2019-14899.
    ;; https://forums.whonix.org/t/enable-reverse-path-filtering/8594
    ("net.ipv4.conf.default.rp_filter" . "1")
    ("net.ipv4.conf.all.rp_filter" . "1")

    ;; meta end


    ;; Previously disabled SACK, DSACK, and FACK.
    ;; https://forums.whonix.org/t/disabling-tcp-sack-dsack-fack/8109
    ;; ("net.ipv4.tcp_sack" . "0")
    ;; ("net.ipv4.tcp_dsack" . "0")
    ;; ("net.ipv4.tcp_fack" . "0")


    ;; meta start
    ;; project Kicksecure
    ;; category networking and security
    ;; description
    ;; disable IPv4 TCP Timestamps

    ("net.ipv4.tcp_timestamps" . "0")

    ;; meta end


    ;; Only allow the SysRq key to be used for shutdowns and the
    ;; Secure Attention Key (SAK).
    ;;
    ;; https://forums.whonix.org/t/sysrq-magic-sysrq-key/8079/
    ("kernel.sysrq" . "132")

    ;; Restrict loading TTY line disciplines to CAP_SYS_MODULE to prevent
    ;; unprivileged attackers from loading vulnerable line disciplines
    ;; with the TIOCSETD ioctl which has been used in exploits before
    ;; such as https://a13xp0p0v.github.io/2017/03/24/CVE-2017-2636.html
    ;;
    ;; https://lkml.org/lkml/2019/4/15/890
    ("dev.tty.ldisc_autoload" . "0")

    ;; Restrict the userfaultfd() syscall to root as it can make heap sprays
    ;; easier.
    ;;
    ;; https://duasynt.com/blog/linux-kernel-heap-spray
    ("vm.unprivileged_userfaultfd" . "0")

    ;; Let the kernel only swap if it is absolutely necessary.
    ;; Better not be set to zero:
    ;; - https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Performance_Tuning_Guide/s-memory-tunables.html
    ;; - https://en.wikipedia.org/wiki/Swappiness
    ("vm.swappiness" . "1")

    ;; Disallow kernel profiling by users without CAP_SYS_ADMIN
    ;; https://www.kernel.org/doc/Documentation/sysctl/kernel.txt
    ("kernel.perf_event_paranoid" . "3")

    ;; Do not accept router advertisments
    ("net.ipv6.conf.all.accept_ra" . "0")
    ("net.ipv6.conf.default.accept_ra" . "0")
    ;; Copyright (C) 2019 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
    ;; See the file COPYING for copying conditions.

    ;; Quote https://www.kernel.org/doc/html/latest/admin-guide/sysctl/kernel.html
    ;;
    ;; kexec_load_disabled:
    ;;
    ;; A toggle indicating if the kexec_load syscall has been disabled. This value defaults to 0 (false: kexec_load enabled), but can be set to 1 (true: kexec_load disabled). Once true, kexec can no longer be used, and the toggle cannot be set back to false. This allows a kexec image to be loaded before disabling the syscall, allowing a system to set up (and later use) an image without it being altered. Generally used together with the "modules_disabled" sysctl.
    ;; Disables kexec which can be used to replace the running kernel.
    ("kernel.kexec_load_disabled" . "1")

    ;; Why is this in a dedicated config file?
    ;; Package ram-wipe requires kexec. However, ram-wipe could not ship a config
    ;; (" file /etc/sysctl.d/40_ram-wipe.conf which sets 'kernel.kexec_load_disabled" . "0'.")
    ;; (" This is because once systemd-sysctl.service has set 'kernel.kexec_load_disabled" . "1'")
    ;; it cannot be undone without reboot. This is a upstream Linux security feature.
    ;; Copyright (C) 2019 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
    ;; See the file COPYING for copying conditions.

    ;; Prevent kernel info leaks in console during boot.
    ;; https://phabricator.whonix.org/T950
    ("kernel.printk" . "3 3 3 3")

    ;; NOTE:
    ;; For higher verbosity, the user might also want to delete file
    ;; /etc/default/grub.d/41_quiet.cfg
    ;; (or out-comment its settings).
    ;;
    ;; Alternatively, the user could consider to install the debug-misc package,
    ;; which will undo the settings found here.
    ))

  (operating-system
    (host-name "gnu")
    (timezone "Etc/UTC")
    (locale "en_US.utf8")
    (keyboard-layout (keyboard-layout "us" "altgr-intl"))

    (kernel my-kernel)
    (initrd microcode-initrd)
    (kernel-arguments %kicksecure-kernel-arguments);(append %default-kernel-arguments ("modprobe.blacklist=b43,b43legacy,ssb,bcm43xx,brcm80211,brcmfmac,brcmsmac,bcma,nouveau")))

    (label (string-append "GNU Guix " (package-version guix)))

    ;(firmware (list linux-firmware))

    (bootloader (bootloader-configuration
                 (bootloader grub-bootloader)
                 ;(terminal-outputs '(console))
                 (targets '("/dev/vda"))))

    (file-systems (cons (file-system
                          (mount-point "/")
                          (device "/dev/vda2");(device (file-system-label "root"))
                          ;(options "compress=zstd,space_cache=v2"); ssd_spread,discard
                          (type "ext4")); "btrfs"
                        %base-file-systems))

    (users (cons (user-account
                  (name "guest")
                  (comment "GNU Guix Live")
                  (password "") ; no password
                  (group "users")
                  (supplementary-groups '("wheel" "netdev"
                                          "audio" "video")))
                 %base-user-accounts))

    ;; Our /etc/sudoers file.  Since 'guest' initially has an empty password; allow for password-less sudo.
    (sudoers-file (plain-file "sudoers" "\
  root ALL=(ALL) ALL
  %wheel ALL=NOPASSWD: ALL\n"))

    (packages (append (list font-bitstream-vera nss-certs nvi cloud-utils); cloud-utils for growpart with resize2fs after img resize
                      %base-packages)) ; wget blueman podman flatpak

    (services
     (append (list (service xfce-desktop-service-type)

                   ;; Choose SLiM, which is lighter than the default GDM.
                   (service slim-service-type
                            (slim-configuration
                             (auto-login? #t)
                             (default-user "guest")
                             (xorg-configuration
                              (xorg-configuration
                               ;; The QXL virtual GPU driver is added to provide a better SPICE experience.
                               (modules (cons xf86-video-qxl
                                              %default-xorg-modules))
                               (keyboard-layout keyboard-layout)))))

                   ;(service bluetooth-service-type
                   ;         (bluetooth-configuration
                   ;          (auto-enable? #f)))

                   ;(service broadcom-service-type)

                   (service openssh-service-type
                            (openssh-configuration ;(%auto-start? #f)
                                                   (port-number 8080)
                                                   (password-authentication? #f)
                                                   (authorized-keys `(("guest" ,(plain-file "jam.pub" "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILjfouQY9m8opK3Sq5G81FuqlMEa5no1Jy1UywweZY3u jam@jam-pc"))
                                                                      ("guest" ,(plain-file "jaming.pub" "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIK+JSxpOM9X8rM6bS0VEfmBeOaQi98o0+aDzYaWIhTBp jam@jam-workstation"))))))

                   ;(service cuirass-service-type
                   ;         (cuirass-configuration (specifications #~(list (specification
                   ;                                                         (name "my-channel-packages")
                   ;                                                         (build '(channels my-channel))
                   ;                                                         (channels (cons (channel
                   ;                                                                          (name 'my-channel)
                   ;                                                                          (url "https://github.com/jamartin9/guix-channel.git"))
                   ;                                                                         %default-channels))
                                                                            ;(notifications (list (rss-feed))); add import for (cuirass rss)
                                                                            ;(build-outputs (list
                                                                            ;                (build-output
                                                                            ;                 (job "binary-tarball")
                                                                            ;                 (type "archive")
                                                                            ;                 (output "out")
                                                                            ;                 (path ""))))
                   ;                                                         (period 600))))
                   ;                                (use-substitutes? #t)
                   ;                                (host "0.0.0.0")))

                   (simple-service 'os-file etc-service-type
                                   (list `("guix-os.scm" ,(local-file "guix-os.scm"))))
                   (simple-service 'os-file etc-service-type
                                   (list `("home.scm" ,(local-file "home.scm"))))

                   (simple-service 'channel-file etc-service-type ; link to ~/.config/guix/channels.scm
                                   (list `("channels.scm" ,(local-file "channels.scm"))))
                   (simple-service 'channel-file etc-service-type
                                   (list `("nonguix-pub.scm" ,(local-file "nonguix-pub.scm"))))

                   (service zfs-service-type
                            (zfs-configuration
                             (kernel my-kernel)))

                   (service nftables-service-type
                            (nftables-configuration
                             (ruleset (plain-file "nftables.conf" "# Firewall hook order is: prerouting -> input/output/forward -> postrouting
  # flush all the rules.
  flush ruleset
  # Define vars.
  #define wan = eno1
  define wan = eth0
  define vpn = wg0
  define vpn_net = 10.0.0.0/24
  define router = 192.168.50.1 # 192.168.1.1

  table inet nat {
    chain prerouting {
      type nat hook prerouting priority -100;
    }
    chain postrouting {
      type nat hook postrouting priority 100;
      oifname $wan ip saddr $vpn_net masquerade
    }
  }
  table inet filter {
    chain input {
      type filter hook input priority 0; policy drop;

      # early drop of invalid connections
      ct state invalid drop

      # allow established/related connections
      ct state { established, related } accept

      # allow from loopback
      iifname lo accept

      # drop icmp
      ip protocol icmp drop
      ip6 nexthdr icmpv6 drop

      # allow ssh
      tcp dport 8080 accept

      # allow spice
      tcp dport 5930 accept

      # allow transmission
      #tcp dport 51413 accept

      # allow ssdp, pcp and nat-pmp port mapping
      udp sport 1900 udp dport >= 1024 meta pkttype unicast limit rate 4/second burst 20 packets accept comment \"Accept UPnP IGD port mapping reply\"
      udp sport 1900 ip saddr $router accept
      udp sport 5350 ip saddr $router accept
      udp sport 5351 ip saddr $router accept

      # allow monerod
      #tcp dport 18080 accept

      # allow p2pool
      #tcp dport 37889 accept

      # allow cuirass
      tcp dport 8081 accept

      # allow wireguard peers to connect to each other
      iifname $vpn accept
      udp dport 51820 accept
      iifname $vpn oifname $vpn ct state new accept

      # allow dhcp
      udp sport bootpc udp dport bootps ip saddr 0.0.0.0 ip daddr 255.255.255.255 accept comment \"Accept DHCPDISCOVER (for DHCP-Proxy)\"

      # allow mdns
      #udp dport mdns ip6 daddr ff02::fb accept comment \"Accept mDNS\"
      #udp dport mdns ip daddr 224.0.0.251 accept comment \"Accept mDNS\"

      # reject everything else
      reject with icmpx type port-unreachable
    }
    chain forward {
      type filter hook forward priority 0; policy drop;

      # drop invalid packets
      ct state invalid drop

      # forward established connections
      ct state established,related accept

      # forward wireguard to wan
      iifname $vpn oifname $wan ct state new accept
    }
    chain output {
      type filter hook output priority 0; policy accept;
    }
  }"))))

                  ; (service transmission-daemon-service-type
                  ;          (transmission-daemon-configuration
                  ;           ;(peer-port 51413)
                  ;           (port-forwarding-enabled? #f)
                  ;           (dht-enabled? #f)
                  ;           (pex-enabled? #f)
                  ;           (rpc-whitelist '("127.0.0.1" "::1" "10.0.0.*"))))

                  ; (service wireguard-service-type
                  ;          (wireguard-configuration
                  ;           (addresses '("10.0.0.5/32"))
                             ;(port 51820)
                             ;(private-key "/etc/wireguard/private.key"); autogened if doesn't exist
                  ;           (peers (list
                  ;                   (wireguard-peer
                  ;                    (name "my-peer")
                                      ;(endpoint "somesuchendpoint")
                  ;                    (public-key "k+ZFm8brFtuVOLUpjQVYdHrCEC5SakGistFjucQa7l4=")
                                      ;(preshared-key "k+ZFm8brFtuVOLUpjQVYdHrCEC5SakGistFjucQa7l4=")
                  ;                    (allowed-ips '("10.0.0.1/24")))))))

                   ;; Add support for the SPICE protocol. Enables dynamic resizing of the guest screen resolution, clipboard and integration with the host.
                   (service spice-vdagent-service-type)

                   ;; Use the DHCP client service rather than NetworkManager.
                   (service dhcp-client-service-type))

             ;; Remove some services that don't make sense in a VM.
             (remove (lambda (service)
                       (let ((type (service-kind service)))
                         (or (memq type
                                   (list gdm-service-type
                                         sddm-service-type
                                         wpa-supplicant-service-type
                                         cups-pk-helper-service-type
                                         network-manager-service-type
                                         modem-manager-service-type))
                             (eq? 'network-manager-applet
                                  (service-type-name type)))))
                     (modify-services %desktop-services
                       (sysctl-service-type config =>
                                            (sysctl-configuration
                                             (settings (append `(,@%kicksecure-sysctl-rules
                                                                 ("net.ipv6.conf.all.forwarding" . "1")
                                                                 ("net.ipv4.ip_forward" . "1"))
                                                               %default-sysctl-settings))))
                       (guix-service-type config =>
                                           (guix-configuration
                                            (inherit config)
                                            ;(log-compression 'none); use btrfs compression
                                            (guix (current-guix))
                                            (substitute-urls
                                   (append (list "https://substitutes.nonguix.org/"); 4zwzi66wwdaalbhgnix55ea3ab4pvvw66ll2ow53kjub6se4q2bclcyd.onion
                                           %default-substitute-urls)) ;(http-proxy) with tor config HTTPTunnelPort
                                            (authorized-keys
                                   (append (list (local-file "./nonguix-pub.scm"))
                                           %default-authorized-guix-keys))))))))

    ;(name-service-switch %mdns-host-lookup-nss) ;; Allow resolution of '.local' host names with mDNS.
    )
#+END_SRC
** User manifest
#+NAME: manifest-scm
#+BEGIN_SRC scheme :tangle user.scm
  ;; Manifest for development env
  (specifications->manifest
   '(
     ;; basic
     ;;"emacs-pgtk-native-comp" ;;"git" ;;"ripgrep" ;;"fd" ;;"nss-certs" ;;"guix" ;;"guile" ;;"shepherd" ;;"glibc-utf8-locales"

     ;;"ungoogled-chromium-nvda"
     ;;"firefox-nvda"

     ;;"transmission"
     ;;"nzbget"
     ;;"steam-nvidia" ;; steam
     ;;"zfs"
     "qemu"
     "perf"
     "bpftrace"
     "bcc"

     ;; C dev
     ;;"make" ;;"cmake"
     ;;"glibc" ;; "musl"
     ;;"gcc-toolchain" ;;"clang-toolchain"
     ;;"gdb" ;;"lldb"
     "rr"
     ;;"binutils"
     ;;"module-init-tools"
     ;;"msr-tools"

     ;; java
     ;;"openjdk"
     ;;"maven"
     ;;"leiningen"
     ;;"clojure"

     ;; julia
     ;;"julia"

     ;; python
     ;;"python"

     ;; shell
     "shellcheck" ;;"bash"
     "htop"
     ;;"xclip"
     ;;"wl-clipboard"
     ;;"bc"
     ;;"jq"
     ;;"coreutils" ;;"busybox"
     ;;"less"
     ;;"gzip"
     ;;"fdisk" ;;"gparted"
     ;;"wget"
     ;;"diffutils"
     ;;"findutils"
     ;;"tar"
     ;;"gawk"
     ;;"which"
     ;;"sed"
     ;;"grep"
     ;;"patch"
     ;;"gash"
     ;;"gash-utils"
     ;;"gnupg"
     ;;"password-store"

     ;; apps
     ;;"wine64"; "wine"
     ;;"winetricks"
     ;;"clamav"
     ;;"filezilla"
     ;;"lynx"
     ;;"libvirt"
     ;;"virt-manager"
     ;;"postgresql"
     ;;"sqlite"
     ;;"tigervnc-client"
     ;;"tigervnc-server"
     ;;"searx"
     ;;"gnuradio"
     ;;"obs"
     ;;"virt-viewer"

     ;; docs
     ;;"libreoffice"
     ;;"calibre"
     ;;"biber"
     ;;"texlive"
     ;;"kiwix-desktop"

     ;; media
     ;;"blender"
     ;;"gimp"
     ;;"inkscape"
     ;;"vlc"
     ;;"mkvtoolnix"
     ;;"mediainfo"
     ;;"ffmpeg"
     ;;"gnuplot"
     ;;"makemkv"
     "flamegraph"
     ;;"yt-dlp"

     ;; net
     ;;"curl"
     ;;"whois"
     ;;"bind:utils"
     ;;"nmap"
     ;;"python-stem"
     ;;"onionshare"
     ;;"iptables"
     ;;"ebtables"
     "wireshark"
     ;;"netcat"
     ;;"net-tools"
     ;;"openssh" ;;"dropbear"
     ;;"wireguard-tools"
     ;;"socat"
     "strace"
     ;;"tor"
     "torsocks"
     ;;"i2pd"
     ;;"screen"
     "dnsmasq"

     ;; Desktop
     ;;"notification-daemon"
     ;;"xfce"; --with-graft=mesa=nvda
     ;;"nvidia-driver"; add udev rules, mesa graft and xorg modules rules
     ))
#+END_SRC
** Channel configuration
#+NAME: guixchannels-scm
#+BEGIN_SRC scheme :tangle channels.scm
(list (channel
       ;; custom guix override
       (name 'guix)
       (url "https://git.savannah.gnu.org/git/guix.git")
       (introduction
        (make-channel-introduction
         "9edb3f66fd807b096b48283debdcddccfea34bad"
         (openpgp-fingerprint
          "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
      (channel
       ;; GUIX_PACKAGE_PATH and (url "file:///home/.../guix-channel")
       (name 'mychannel)
       (url "https://github.com/jamartin9/guix-channel")
       (introduction
        (make-channel-introduction
         "a8de09ac62260319e6376f21c995f713c1b09279"
         (openpgp-fingerprint
          "34AF BE87 8193 580F F441  AB3F 95AF 699C 293E 302B")))))
#+END_SRC
** non guix key
#+NAME: nonguix-pubkey
#+BEGIN_SRC scheme :tangle nonguix-pub.scm
(public-key
 (ecc
  (curve Ed25519)
  (q #C1FD53E5D4CE971933EC50C9F307AE2171A2D3B52C804642A7A35F84F3A4EA98#)
  )
 )
#+END_SRC
** guix notes
- transform options for source, c-toolchain, debug, grafts/inputs
  - ~--with-commit=SomeSuchPackage=XXX~
- ~-L ./guix-channel~ to use local channel changes
- ~guix pack -S /bin=bin -S /sbin=sbin --localstatedir -RR guix bash-static~
- ~guix package --roll-back~ to drop to last version
- commit signing and downgrading flags are ~--disable-authentication --allow-downgrades~
- platform specific binaries can be produces with the ~--tune~ flag
- hpc channel for extra pytorch packages
  - https://gitlab.inria.fr/guix-hpc/guix-hpc/
  - misc channels https://git.sr.ht/~whereiseveryone/toys/log
- non root guix can be done through a series of env variables and flags
  - arg ~--listen=/socket~ and/or env vars
- app img run ~mount thing.AppImage tmpmnt -o offset=$(guix shell -C -F zlib -- "./thing.AppImage --appimage-offset")~
- guix shell can emulate normal fs with --emulate-fhs
- set package as GC root with ~ln --symbolic --force /path/to/guix/packagelink /var/guix/gcroots~ for guix copy
- download source with ~guix build -S PKG~
- search with ~rg -a -z "STR" /gnu/store/PKG.tar.gz~
  - Add ~$XDG_DATA_HOME/guix/bin~ to ~$PATH~
  - ~--disable-chroot~
- default source for user is ~$HOME/.guix-profile/etc/profile~ and ~$XDG_CONFIG_HOME/guix/etc/profile~
  - cleanup space with ~guix package -d && guix pull -d && guix gc~
  - os templates for qemu images with ~guix system image -t qcow2 --save-provenance~
    - guix system upgrade
      - ~ln -s /etc/channels.scm ~/.config/guix/channels.scm~
      - ~guix pull~ ~. ~/.config/guix/current/etc/profile~
      - ~sudo -E guix system reconfigure /etc/guix-os.scm~
    - run guix vm
      - ~qemu-system-x86_64 -nic user,model=virtio-net-pci,hostfwd=tcp::10022-:22 -enable-kvm -m 1024 -device virtio-blk,drive=myhd -drive if=none,file=$MY_IMAGE,id=myhd -spice port=5930,disable-ticketing~
    - grow vm disk
      - ~qemu-image resize IMAGE.qcow2 +10G~
      - ~growpart /dev/vda 2~
      - ~resize2fs /dev/vda2~
  - ~guix hash -xr .~ for the checksum of a repo
  - ~guix publish~ substitutes after exporting/importing key with ~guix archive~ or use nars with ~guix archive --export -r~
- packages are standard SRFI-9 guile records (set-fields, etc...)
- nonguix substitutes at ~substitutes.nonguix.org~ key is ~/signing-key.pub~.
- ~guix time-machine --commit=a4eae0c3adce8e4c4ac153a4959d18b9897a67e1 -- package -i old~
- manual setup
#+NAME: manual-guix
#+BEGIN_SRC shell tangle: no
#https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh
# get tarball for system=x86_64-linux,aarch64,armhf,i686
wget https://ftp.gnu.org/gnu/guix/guix-binary-1.0.1.x86_64-linux.tar.xz
# check sig
wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import
wget https://ftp.gnu.org/gnu/guix/guix-binary-1.0.1.x86_64-linux.tar.xz.sig
gpg --verify guix-binary-1.0.1.x86_64-linux.tar.xz.sig
# with root
sudo -i
# untar into dirs
tar --warning=no-timestamp -xf /path/to/guix-binary-1.0.1.x86_64-linux.tar.xz
mv var/guix /var/ && mv gnu /
# add guix profile
mkdir -p ~root/.config/guix
ln -sf /var/guix/profiles/per-user/root/current-guix ~root/.config/guix/current
# setup build daemon for multiple users
cp ~root/.config/guix/current/lib/systemd/system/guix-daemon.service /etc/systemd/system/
# add build users
groupadd --system guixbuild
for i in `seq -w 1 10`;
do
    useradd -g guixbuild -G guixbuild           \
            -d /var/empty -s `which nologin`    \
            -c "Guix build user $i" --system    \
            guixbuilder$i;
done
# link guix and info for all users
mkdir -p /usr/local/bin
cd /usr/local/bin
ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix
mkdir -p /usr/local/share/info
cd /usr/local/share/info
for i in /var/guix/profiles/per-user/root/current-guix/share/info/* ;
do ln -s $i ; done
# source guix profile and add sub servers
source ~/root/.config/guix/current/etc/profile
guix archive --authorize < ~root/.config/guix/current/share/guix/ci.guix.gnu.org.pub
guix archive --authorize < ~root/.config/guix/current/share/guix/bordeaux.guix.gnu.org.pub
# install locale
guix package -i glibc-utf8-locales
#+END_SRC

#+NAME: guix-fhs-examples
#+BEGIN_SRC sh :tangle no
guix shell --container --network --emulate-fhs \
    --development ungoogled-chromium gcc:lib \
    --preserve='^DISPLAY$' \
    --preserve='^XAUTHORITY$' --expose=$XAUTHORITY \
    --preserve='^DBUS_' --expose=/var/run/dbus \
    --expose=/sys/dev --expose=/sys/devices --expose=/dev/dri \
    -- ./VSCodium-1.74.0.22342.glibc2.17-x86_64.AppImage --appimage-extract-and-run # Run VSCodium Appimage

guix shell --network --container --emulate-fhs \
    bash coreutils curl grep nss-certs gcc:lib gcc-toolchain \
    pkg-config glib cairo atk pango@1.48.10 gdk-pixbuf gtk+ git \
    --share=$HOME/temphome=$HOME --no-cwd

curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh # install rustup in guix

guix shell --container --network --emulate-fhs \
    --preserve='^DISPLAY$' \
    --preserve='^XAUTHORITY$' --expose=$XAUTHORITY \
    alsa-lib bash coreutils dbus-glib file gcc:lib \
    grep gtk+ libcxx pciutils sed \
    -- ./start-tor-browser.desktop -v ; # Start tor-browser
#+END_SRC

#+NAME: guix-env-vars
#+BEGIN_SRC sh :tangle no
GUIX_DAEMON_SOCKET=$XDG_DATA_HOME/guix/var/guix/daemon-socket/socket
GUIX_DATABASE_DIRECTORY=$XDG_DATA_HOME/guix/var/guix/db
GUIX_LOG_DIRECTORY=$XDG_DATA_HOME/guix/var/log/guix
GUIX_STATE_DIRECTORY=$XDG_DATA_HOME/guix/var/guix
GUIX_CONFIGURATION_DIRECTORY=$XDG_CONFIG_HOME/guix/etc
GUIX_LOCPATH=$XDG_DATA_HOME/guix/var/guix/profiles/per-user/root/guix-profile/lib/locale
NIX_STORE=$XDG_DATA_HOME/guix/gnu/store
#+END_SRC

** guix issues
*** TODO [#C] [PATCH v1] initrd: Allow extra search paths with ‘initrd-extra-module-paths’ :patch:
  [2022-05-02 Mon] Submitted
  :PROPERTIES:
  :DEBBUGS_ID: 55231
  :CREATOR: Brian Cully <bjc@spork.org>
  :END:
  [[elisp:(progn (debbugs-org-mode 1) (debbugs-gnu-select-report))][Messages]]
  [2022-06-21 Tue] Last modified
*** TODO [#C] Support binaries that need "setcap" similar to "setuid-programs"
  [2022-05-27 Fri] Submitted
  :PROPERTIES:
  :DEBBUGS_ID: 55683
  :CREATOR: Vagrant Cascadian <vagrant@debian.org>
  :END:
  [[elisp:(progn (debbugs-org-mode 1) (debbugs-gnu-select-report))][Messages]]
  [2022-05-27 Fri] Last modified
#+NAME: guix-manifest-cuirass
#+BEGIN_SRC scheme :tangle no
; WIP This does not work as it can't find patches? (ghostscript)
(define-module (etc httm-manifest)
 #:use-module (guix scripts pack)
 #:use-module (guix gexp)
 #:use-module (guix monads)
 #:use-module (guix profiles)
 #:use-module (guix store)
 #:use-module (guix derivations)
 #:use-module (guix modules)
 #:use-module (gnu packages)
 #:use-module (gnu packages gnupg)
 #:use-module (gnu packages guile)
 #:use-module (gnu packages ghostscript)

 )

;(display (source-module-closure '((guix scripts pack)
;                                  (guix monads)
;                                  (guix profiles)
;                                  (guix store)
;                                  (guix derivations))))

  (manifest
   (list
    (manifest-entry
     (name "httm-binary-tarball")
     (version "0.30.0")
     (item (computed-file "httm-directory"
                          (with-extensions (list guile-gcrypt guile-zlib guile-git guile-bytestructures guile-json-4)
                                           (with-imported-modules (source-module-closure
                                                                   '(;(guix packages)
                                                                     ;(guix utils)
                                                                     ;(gnu compression)
                                                                     ;(gnu packages ghostscript)
                                                                     ;(gnu packages)
                                                                     (guix scripts pack)
                                                                     (guix monads)
                                                                     (guix profiles)
                                                                     (guix store)
                                                                     (guix derivations))
                                                                   ;(append %load-path (%patch-path)); load-path
                                                                   )
                          #~(let ((bin (string-append #$output "/bin")))
                              (mkdir #$output) (mkdir bin)
                              (use-modules ;(guix packages)
                                           ;(guix gexp)
                                           ;(guix utils)
                                           ;(gnu compression)
                                           ;(gnu packages ghostscript)
                                           ;(gnu packages)
                                           (guix scripts pack)
                                           (guix monads)
                                           (guix profiles)
                                           (guix store)
                                           (guix derivations))
                              (define (build-tarballs)
                                (run-with-store (open-connection)
                                                (mbegin %store-monad
                                                        ;(set-guile-for-build (default-guile))
                                                        (>>= (profile-derivation (packages->manifest (list "rust-httm-0.30")))
                                                             (lambda (profile)
                                                               (self-contained-tarball "httm-binary" profile
                                                                                       #:profile-name "rust-httm"
                                                                                      ;#:localstatedir? #t
                                                                                      ;#:compressor (lookup-compressor "xz")
                                                                                       ))))
                                                #:system "x86_64-linux"))
                              (symlink (derivation->output-path (build-tarballs)) (string-append bin "rust-httm.tar.xz"))))))))))

#+END_SRC
#+NAME: cuirass-jobs
#+BEGIN_SRC scheme :tangle no
; WIP This does not work as no build is done when using 'custom'
(define-module (jam packages jobs)
  #:use-module (jam packages httm)
  #:use-module (jam packages bottom)
  #:use-module (gnu ci)
  #:use-module (gnu compression)
  #:use-module ((guix scripts pack) #:select (self-contained-tarball))
  #:use-module (guix gexp)
  #:use-module (guix store)
  #:use-module (guix monads)
  #:use-module (guix packages)
  #:use-module (guix profiles)
  #:use-module (guix utils))

(define-public (cuirass-jobs store arguments)
  "Register Cuirass jobs."
  (tarball-jobs store (arguments->system arguments)))


(define (tarball-jobs store system)
  "Return jobs to build the self-contained Guix binary tarball."
  (define (->job name drv)
    (let ((name (string-append name "." system)))
      (parameterize ((%graft? #f))
        (derivation->job name drv))))
  (list
   (->job "binary-tarball-httm"
          (run-with-store store
            (mbegin %store-monad
              (set-guile-for-build (default-guile))
              (>>= (profile-derivation (packages->manifest (list rust-httm-0.30)))
                   (lambda (profile)
                     (self-contained-tarball "rust-httm-binary" profile
                                             #:profile-name "rust-httm"
                                             ;#:localstatedir? #t
                                             #:compressor (lookup-compressor "xz")))))
            #:system system))))
#+END_SRC
