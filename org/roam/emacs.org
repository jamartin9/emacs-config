:PROPERTIES:
:ID:       44337591-05ba-4e17-a151-4b4920906712
:END:
#+title: emacs
#+OPTIONS: toc:nil num:nil date:nil \n:nil html-style:nil author:nil timestamp:nil title:nil html-postamble:nil html5-fancy:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-default.css" />
#+HTML_CONTENT_CLASS: container
#+HTML_DOCTYPE: html5
#+INCLUDE: "css.org::navbar" :only-contents t
* Emacs
** emacs notes
- ~toggle-debug-on-quit~ for stacktraces of hung commands
- pgtk enabled ~broadwayd~ port 8080 with apps env var ~GDK_BACKEND=broadway~ (deprecated in GTK 5)
- magit-generate-changelog for commit msg
- gnus needs app password from google for 2fa or oauth token from gcloud
- webkit environment variable(s) for built-in browser
  - ~WEBKIT_FORCE_SANDBOX="0"~ is obe use ~WEBKIT_DISABLE_SANDBOX_THIS_IS_DANGEROUS=1~
    - maybe set ~GST_PLUGIN_PATH~
- android port manual entry specifies enabling 'special app permissions' for all files to access ~/sdcard~
  - android port of fdroid is old and branch is unmerged; newer builds are on [[https://sourceforge.net/projects/android-ports-for-gnu-emacs/][sourceforge]]
    - custom build of termux for supporting utils
- signal-cli integration init ~signal-cli link --name device_name | head -1 | qrencode --type=UTF8~
- guile scheme port of emacs lisp https://codeberg.org/ramin_hal9001/gypsum/
- guile-emacs project https://git.hcoop.net/bpt/emacs.git
- literal org blocks for artist mode by using ~#+BEGIN_EXAMPLE~ and ~#+END_EXAMPLE~ with each line starting with a colon then a space (avoid special chars)
#+BEGIN_EXAMPLE :tangle no
 :
 :
 :
 :                               ----------                                     \
 :                              /          \--------|                          | \                  |
 :                             /                    |                          / |                /-|                                                                                            -----
 :                            /                     |                         /   \              /   \                              /-\                                                ---------/   |
 :                           /                     /                         |     \           /-    |                           ---   \-                                    ---------/             |
 :                          |         o------------|                         /      \         /       \                         |        \                             +----/                       |
 :                          /         /            \                        |       |        /        |                         /         \                            |                            |
 :                         /         |                                      /        \     /-         |                        |           \-                          |                  /---------+
 :                        /          /                                     /          \   /            \                       /             \                          \              /--
 :                       /          |                                     |           | /-             |                      /               \-                        |           /--
 :                      /          -+--------------|                      /            X                \                    |      --          \                       |         +-
 :                     /                           |                     /                              |                    /     |  \--        \                      |         |
 :                    /                            |                    |         |                     |                   |      /     \-       \-                    |         \
 :                   /                             |                    /         ||         -+          \                  /     /--------\       \                   \         |
 :                  /                             /                    |         / \      --/ |          |                 |                         \                   |         |
 :                 |                              |                    /         |  \  --/    |           \                /                          \-                 \          -\
 :                 /            oo-----------------                   /          |   \/       |           |               /                X            \                 \           \
 :                /             |                                    |          /             |           |              |               -/ -\           \-                \           -\
 :               /              |                                    /          |             \            \             /             -/     -\           \                \            \----------------------+
 :              /               |                                   /           |              |           |            |            -/         \           \               |                                   |
 :             /                +------------------+               |           /               |            \           /          -/            -\          \-              \                                  |
 :            /                                    |               /          -+               |         ---+          /         -/                -\      -----              --                                |
 :           -+                                    |              |       ---/                 |   -----/              o    ----/                    \----/                     \-                             /+
 :            |                                   /               /   ---/                     +--/                     \--/                                                      \--                        /-
 :           oo----------------\                  |             -o---/                                                                                                               \-                    /-
 :                              -------------------                                                                                                                                   \------------------/

#+END_EXAMPLE
#+NAME: signal-cli
#+BEGIN_SRC emacs-lisp :tangle no
(use-package signal-msg ; https://github.com/AsamK/signal-cli
  :commands (signal-msg-new-message) ; jam/signal-msg-rec
  :config (setq signal-msg-username (alist-get 'secret (auth-source-pass-parse-entry "signal/account"))
                signal-msg-number (alist-get 'secret (auth-source-pass-parse-entry "signal/phone")))
  (advice-add 'signal-msg-send :override #'jam/signal-msg-send))

;;;###autoload
(defun jam/signal-msg-send ()
  "Override to use -a account notation and stdin for sending buffer to signal-cli"
  (interactive)
  (let ((exit-code (call-process-region
                    (point-min)
                    (point-max)
                    "signal-cli"
                    nil                                  ; delete
                    nil                                  ; buffer
                    nil                                  ; display
                    "-a" signal-msg-number "send" "--message-from-stdin" signal-msg-dest-number)))
    (if (= exit-code 0)
        (kill-buffer)
      (warn (format "Something went wrong. signal-cli returned %d" exit-code)))))

;;;###autoload
(defun jam/signal-msg-rec ()
  "Reads all json encoded messages from signal-cli into *Signal* buffer"
  (interactive)
  (with-temp-buffer (progn (call-process "signal-cli" nil (current-buffer) nil "--output=json" "receive"); (call-process "cat" nil (current-buffer) nil "signals.json")
                           ;(message "current buffer is %s " (buffer-string))
                           (goto-char (point-min))
                           (unwind-protect
                               (while (not (eobp))
                                 (let* (;(message-json (json-read-file "signals.json"))
                                        (message-json (json-read))
                                        (message-content (alist-get 'envelope message-json ))
                                        (message-from (alist-get 'sourceName message-content))
                                        (message-data (alist-get 'dataMessage message-content))
                                        (message-text (alist-get 'message message-data)))
                                   ;(message "\nFrom: %s\nMessage: %s\n" message-from message-text)
                                   (with-current-buffer (get-buffer-create "*Signal*") (insert (format "\nFrom: %s\nMessage: %s\n" message-from message-text)))))))))
#+END_SRC
#+NAME: local-guix-emacs-env
#+BEGIN_SRC emacs-lisp :tangle no
;;;###autoload
(defun jam/guix-env()
  "Guix variables for local guix daemon/client"
  (interactive)
  (require 'xdg)
  (setenv "GUIX_DAEMON_SOCKET" (concat (file-name-as-directory (xdg-data-home)) (file-name-as-directory "guix") (file-name-as-directory "var") (file-name-as-directory "guix") (file-name-as-directory "daemon-socket") "socket"))
  (setenv "GUIX_DATABASE_DIRECTORY" (concat (file-name-as-directory (xdg-data-home)) (file-name-as-directory "guix") (file-name-as-directory "var") (file-name-as-directory "guix") "db"))
  (setenv "GUIX_LOG_DIRECTORY" (concat (file-name-as-directory (xdg-data-home)) (file-name-as-directory "guix") (file-name-as-directory "var") (file-name-as-directory "log") "guix"))
  (setenv "GUIX_STATE_DIRECTORY" (concat (file-name-as-directory (xdg-data-home)) (file-name-as-directory "guix") (file-name-as-directory "var") "guix"))
  (setenv "GUIX_CONFIGURATION_DIRECTORY" (concat (file-name-as-directory (xdg-config-home))(file-name-as-directory "guix") "etc"))
  (setenv "GUIX_LOCPATH" (concat (file-name-as-directory (xdg-data-home)) (file-name-as-directory "guix") (file-name-as-directory "var") (file-name-as-directory "guix") (file-name-as-directory "profiles") (file-name-as-directory "per-user") (file-name-as-directory "root") (file-name-as-directory "guix-profile") (file-name-as-directory "lib") "locale"))
  (setenv "NIX_STORE" (concat (file-name-as-directory (xdg-data-home)) (file-name-as-directory "guix") (file-name-as-directory "gnu") "store")) ; NIX_STORE_DIR
  (setenv "PATH" (concat (getenv "PATH") path-separator (concat (file-name-as-directory (xdg-data-home)) (file-name-as-directory "guix") "bin"))))
#+END_SRC

#+NAME: emacs-maybe-packages
#+BEGIN_SRC emacs-lisp :tangle no
; rss/atom feed reader
(use-package newsticker
  :ensure nil ; built-in
  :commands (newsticker-start newsticker-treeview newsticker-plainview newsticker-stop)
  :bind (:map jam/open ("n" . newsticker-treeview)
         :map jam/toggle ("n" . newsticker-stop)
         :map newsticker-treeview-item-mode-map ("d" . (lambda () (interactive); Download the current newsticker enclosure to tmpdir/newsticker/feed/title
                                                         (let* ((item (newsticker--treeview-get-selected-item))
                                                                (feedname "newsticker")
                                                                (title (newsticker--title item))
                                                                (enclosure (newsticker--enclosure item))
                                                                (download-dir (file-name-as-directory
                                                                               (expand-file-name (newsticker--title (newsticker--treeview-get-selected-item))
                                                                                                 (expand-file-name feedname (expand-file-name "newsticker" temporary-file-directory))))))
                                                           (newsticker-download-enclosures feedname item)
                                                           (message download-dir)))))
  :init
  (setq newsticker-frontend 'newsticker-treeview
        newsticker-dir (concat user-emacs-directory (file-name-as-directory ".local") (file-name-as-directory "cache") "newsticker")
        newsticker-automatically-mark-items-as-old nil
        newsticker-automatically-mark-visited-items-as-old t
        newsticker-url-list-defaults nil
        newsticker-url-list '(("styx" "https://odysee.com/$/rss/@Styxhexenhammer666:2"))))

;debbugs: track emacs bugs (guix moved to forejo). alternative is bookmarking websites/mailing lists
(use-package debbugs
  ;:pin gnu
  :bind (:map jam/search ("b" . debbugs-gnu-bugs)); bug number search
  :commands (debbugs-gnu debbugs-gnu-tagged debbugs-org debbugs-org-tagged debbugs-org-mode debbugs-gnu-bugs debbugs-gnu-guix-search debbugs-org-guix-search)
  :config ;(setq org-link-elisp-confirm-function nil)
  (setq debbugs-gnu-default-packages '("guix-patches"))
  (require 'debbugs-guix) (require 'debbugs-org) (require 'debbugs-gnu) (require 'debbugs-browse)); C-u M-x debbugs-gnu guix-patches n y then tag with t
; removed for built-in completion-preview
(use-package company
  ;:pin gnu ; pin gnu for android
  :bind (:map jam/toggle ("i" . global-company-mode))
  :hook ((after-init . global-company-mode))
  (setq company-minimum-prefix-length 2
        company-tooltip-limit 14
        company-tooltip-align-annotations t
        company-require-match 'never
        company-global-modes '(not erc-mode message-mode help-mode gud-mode);eshell-mode
        company-frontends
        '(company-pseudo-tooltip-frontend  ; always show candidates in overlay tooltip
          company-echo-metadata-frontend)  ; show selected candidate docs in echo area
        company-backends '(company-capf company-yasnippet); company-ispell company-files company-keywords company-dabbrev
        company-auto-commit nil
        company-dabbrev-other-buffers nil
        company-dabbrev-ignore-case nil
        company-dabbrev-downcase nil)
  :commands (global-company-mode company-complete-common company-complete-common-or-cycle company-manual-begin company-grab-line)
  :config (require 'company-tng) ; TabNGo
  (company-tng-configure-default))
;combobulate?: structural editing. alternative is regex
(use-package combobulate
  :init (setq combobulate-key-prefix "C-c e")
  :hook (((python-ts-mode yaml-ts-mode) . combobulate-mode))
  :vc (:url "https://github.com/mickeynp/combobulate" :rev :newest) ; install from source with package.el or url-copy-file
  :load-path ("/gnu/git/combobulate"))

;eglot-x?: rust-analyzer extensions for memory layout and structural-search-replace. alternative is to copy the functions
(use-package eglot-x
  :after eglot
  :config (eglot-x-setup)
  :vc (:url "https://github.com/nemethf/eglot-x" :rev :newest))

;atomic-chrome?: counterpart to https://github.com/KarimAziev/chrome-emacs for using emacs to edit browser buffers. alternative is copy-paste
(use-package atomic-chrome
  :vc (:url "https://github.com/KarimAziev/atomic-chrome" :rev "3387284d8789cf1d2a54425019a27f2e099b80d5")
  :bind (:map jam/toggle ("b" . atomic-chrome-toggle-server))
  :commands (atomic-chrome-start-server atomic-chrome-toggle-server)
  :config
  (setq-default atomic-chrome-buffer-open-style 'frame)
  (setq-default atomic-chrome-auto-remove-file t)
  (setq-default atomic-chrome-url-major-mode-alist
                '(("github.com" . gfm-mode)
                  ("gitlab.com" . gfm-mode)))
  (add-to-list 'atomic-chrome-create-file-strategy `(,(concat user-emacs-directory (file-name-as-directory ".local") (file-name-as-directory "cache") "src") :extension ("js" "ts" "tsx" "jsx" "cjs" "mjs"))))

(use-package llm-tool-collection; instead of mcp
  :after (gptel)
  :vc (:url "https://github.com/skissue/llm-tool-collection" :rev "304a06aacbe77ce0ee5f2a6c9063d4a3a4bfda22")
  :config ;(apply #'gptel-make-tool (llm-tool-collection-get "read_file"))
  (mapcar (apply-partially #'apply #'gptel-make-tool) (llm-tool-collection-get-category "filesystem")))


;;(push '(scala-mode . scala-ts-mode) major-mode-remap-alist)
;; :hook (((scala-ts-mode scala-mode) . eglot-ensure)) ;eglot
;;(add-to-list 'eglot-server-programs `((scala-mode scala-ts-mode) . ,(alist-get 'scala-mode eglot-server-programs)))
;;(mcp-hub-servers `(("metals" :url "127.0.0.1:39497")))
(use-package scala-mode
  :mode ("\\.scala\\'" . scala-mode)
  :interpreter ("scala" . scala-mode)
  :config (setq eglot-workspace-configuration '(:metals  (:startMcpServer t)));.dir-locals.el ;((scala-mode . ((eglot-workspace-configuration . (:metals (:startMcpServer t))))))
  :commands (scala-mode))

(use-package scala-ts-mode
  :mode ("\\.scala\\'" . scala-ts-mode)
  :interpreter ("scala" . scala-ts-mode)
  :config (setq eglot-workspace-configuration '(:metals  (:startMcpServer t)));.dir-locals.el ;((scala-ts-mode . ((eglot-workspace-configuration . (:metals (:startMcpServer t))))))
  :commands (scala-ts-mode))

(use-package sbt-mode
  :commands sbt-start sbt-command
  :config (setq sbt:program-options '("-Dsbt.supershell=false")))

;; require packages for sbcl sbcl-coalton emacs-sly
(use-package sly; (require 'coalton) (in-package #:coalton-user) (coalton (+ 1 1))
  :hook (lisp-mode . sly-editing-mode)
  :commands (sly sly-setup sly-enable-contrib sly-editing-mode sly-eval-region sly-mode)
  :config
  (setq sly-mrepl-history-file-name (concat user-emacs-directory (file-name-as-directory ".local") (file-name-as-directory "cache") "sly-mrepl-history")
        sly-kill-without-query-p t
        sly-net-coding-system 'utf-8-unix
        sly-complete-symbol-function 'sly-flex-completions
        sly-lisp-implementations '((sbcl ("sbcl") :coding-system utf-8-unix))))

#+END_SRC

- German air control ATC ran on emacs in the 90's
- calc can plot with gnuplot
  - ~set yrange [0:50]~, ~set xrange [0:2200]~, ~plot 4 * sqrt(x + 10) / log10(x + 10) - 4 * sqrt(10)~
*** org-mode notes
- noweb can link code verbatium with <<CodeBlockName>> or evaluate it with <<CodeBlockName>>()
- ~#+INCLUDE "file.org::selector" :only-contents t~ to select heading contents to include from other files
- disable tangling with ~:tangle no~ on src blocks
#+NAME: timestamp-readme
#+BEGIN_SRC emacs-lisp :tangle emacs.sh :shebang "\":\"; emacs -Q --script emacs.sh -- $@ $args ; exit $? # -*- mode: emacs-lisp; lexical-binding: t; -*-"
(ignore-errors
  (let* ((base-dir (file-name-directory (or load-file-name buffer-file-name)))
         (readme (concat base-dir (file-name-as-directory "..") (file-name-as-directory "..") "README.org"))
         (readme-time (file-attribute-modification-time (file-attributes readme)))
         (emacs-org (concat base-dir "emacs.org"))
         (emacs-org-time (file-attribute-modification-time (file-attributes emacs-org))))
    (if (time-less-p emacs-org-time readme-time); set timestamp of emacs.html when readme.org has newer edits
      (set-file-times (concat base-dir "emacs.html") (time-add readme-time (seconds-to-time 1))))))
#+END_SRC

*** emacs config notes
- installs to ~${XDG_CONFIG_HOME}/emacs~
- early-init will use guix-home packages if emacs package directory exists inside it otherwise uses use-package to download
- Pure elisp instead of makefiles and shell scripts
  - sesquicolon 'shebang'
  - build system
    - runs any untangled elisp scripts
    - sets timestamps
    - exports custom elements for html/org-roam and expands INCLUDE directives
    - build site
      - git worktree
      - sitemap self untangles an org document
        - site search uses sqlite fts index and stores the db in opfs for reuse
      - copy js, css, png, sqlite db, etc by timestamp
        - migrated css from custom hand rolled to bulma then to pico for better defaults and less configuration
      - navbar contains index/sitemap links
        - INCLUDE in each page for css/navbar
    - wraps couple common commands
- org roam dialies are a date tree journal
- tangled files set own timestamps in scripts
- defaults copied from doom/spacemacs when dropped
- all keys bounds under C-c c
- prefer defaults when possible
- prefer eshell for tramp traversal
- gnus over newsticker as more backends and own the frame
- prefix named interactive commands over inline functions for M-x and binds
- added mouse clicking to command buffer
  - special case handling of Files:
- android support with termux build
- save files locally under .local/cache and .local/etc
- do not hardcode paths and use xdg
- tricks to speed up init
  - defer package loading with use-package
  - skip packages at startup
  - add memory for skipping gc
  - unbinding file-handler matching
  - native code
  - package-quickstart
  - autoload functions
  - dump saves a little time
  - after-init hooks
  - setq inhibits-*
  - disable frame features without loading
- gc with idle timer
- cua for copy/paste
- xterm/broadwayd/daemon support
- transparent background
- extra mouse support
- sound alert
- packages in README for extras
  - functions under ~M-x jam/~ prefix
    - sudo-edit
    - auth-display
      - vendored totp implementation for authinfo password storage
    - draw
    - eshell
    - save-all (buffers)
    - mpv-play
    - screenshot
      - image-crop is a bind
      - ffmpeg for resize ~ffmpeg -i cropped.png -vf "scale=1280:720" scaled.png~
    - replace unicode
      - ZERO WIDTH NO-BREAK SPACE(BOM), ZERO WIDTH SPACE, RIGHT-TO-LEFT MARK, RIGHT-TO-LEFT OVERRIDE, LEFT-TO-RIGHT MARK, OBJECT REPLACEMENT CHARACTER
    - compile-init-bytecode
** emacs-config README
#+INCLUDE: "../../README.org::emacs-config" :only-contents t
