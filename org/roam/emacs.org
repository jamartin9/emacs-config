:PROPERTIES:
:ID:       44337591-05ba-4e17-a151-4b4920906712
:END:
#+title: emacs
#+OPTIONS: toc:nil num:nil date:nil \n:nil html-style:nil author:nil timestamp:nil title:nil html-postamble:nil html5-fancy:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-default.css" />
#+HTML_CONTENT_CLASS: container content
#+HTML_DOCTYPE: html5
#+INCLUDE: "css.org::navbar" :only-contents t
* Emacs
** emacs notes
- ~toggle-debug-on-quit~ for stacktraces of hung commands
- pgtk enabled ~broadwayd~ port 8080 with apps env var ~GDK_BACKEND=broadway~
- magit-generate-changelog for commit msg
- gnus needs app password from google for 2fa or oauth token from gcloud
- webkit environment variable(s) for built-in browser
  - ~WEBKIT_FORCE_SANDBOX="0"~ is obe use ~WEBKIT_DISABLE_SANDBOX_THIS_IS_DANGEROUS=1~
    - maybe set ~GST_PLUGIN_PATH~
- android port manual entry specifies enabling 'special app permissions' for all files to access ~/sdcard~
  - android port of fdroid is old and branch is unmerged; newer builds are on [[https://sourceforge.net/projects/android-ports-for-gnu-emacs/][sourceforge]]
    - custom build of termux for supporting utils
- signal-cli integration init ~signal-cli link --name device_name | head -1 | qrencode --type=UTF8~
#+NAME: signal-cli
#+BEGIN_SRC emacs-lisp :tangle no
(use-package! signal-msg ; https://github.com/AsamK/signal-cli
  :commands (signal-msg-new-message) ; jam/signal-msg-rec
  :config (setq signal-msg-username (alist-get 'secret (auth-source-pass-parse-entry "signal/account"))
                signal-msg-number (alist-get 'secret (auth-source-pass-parse-entry "signal/phone")))
  (advice-add 'signal-msg-send :override #'jam/signal-msg-send))

;;;###autoload
(defun jam/signal-msg-send ()
  "Override to use -a account notation and stdin for sending buffer to signal-cli"
  (interactive)
  (let ((exit-code (call-process-region
                    (point-min)
                    (point-max)
                    "signal-cli"
                    nil                                  ; delete
                    nil                                  ; buffer
                    nil                                  ; display
                    "-a" signal-msg-number "send" "--message-from-stdin" signal-msg-dest-number)))
    (if (= exit-code 0)
        (kill-buffer)
      (warn (format "Something went wrong. signal-cli returned %d" exit-code)))))

;;;###autoload
(defun jam/signal-msg-rec ()
  "Reads all json encoded messages from signal-cli into *Signal* buffer"
  (interactive)
  (with-temp-buffer (progn (call-process "signal-cli" nil (current-buffer) nil "--output=json" "receive"); (call-process "cat" nil (current-buffer) nil "signals.json")
                           ;(message "current buffer is %s " (buffer-string))
                           (goto-char (point-min))
                           (unwind-protect
                               (while (not (eobp))
                                 (let* (;(message-json (json-read-file "signals.json"))
                                        (message-json (json-read))
                                        (message-content (alist-get 'envelope message-json ))
                                        (message-from (alist-get 'sourceName message-content))
                                        (message-data (alist-get 'dataMessage message-content))
                                        (message-text (alist-get 'message message-data)))
                                   ;(message "\nFrom: %s\nMessage: %s\n" message-from message-text)
                                   (with-current-buffer (get-buffer-create "*Signal*") (insert (format "\nFrom: %s\nMessage: %s\n" message-from message-text)))))))))
#+END_SRC
- German air control ATC ran on emacs in the 90's
- calc can plot with gnuplot
  - ~set yrange [0:50]~, ~set xrange [0:2200]~, ~plot 4 * sqrt(x + 10) / log10(x + 10) - 4 * sqrt(10)~
*** org-mode notes
- noweb can link code verbatium with <<CodeBlockName>> or evaluate it with <<CodeBlockName>>()
- ~#+INCLUDE "file.org::selector" :only-contents t~ to select heading contents to include from other files
- disable tangling with ~:tangle no~ on src blocks

#+NAME: timestamp-readme
#+BEGIN_SRC emacs-lisp :tangle emacs.sh :shebang "\":\"; emacs -Q --script emacs.sh -- $@ $args ; exit $? # -*- mode: emacs-lisp; lexical-binding: t; -*-"
(ignore-errors
  (let* ((base-dir (file-name-directory (or load-file-name buffer-file-name)))
         (readme (concat base-dir (file-name-as-directory "..") (file-name-as-directory "..") "README.org"))
         (readme-time (file-attribute-modification-time (file-attributes readme)))
         (emacs-org (concat base-dir "emacs.org"))
         (emacs-org-time (file-attribute-modification-time (file-attributes emacs-org))))
    (if (time-less-p emacs-org-time readme-time); set timestamp of emacs.html when readme.org has newer edits
      (set-file-times (concat base-dir "emacs.html") (time-add readme-time (seconds-to-time 1))))))
#+END_SRC

** emacs-config README
#+INCLUDE: "../../README.org::emacs-config" :only-contents t
