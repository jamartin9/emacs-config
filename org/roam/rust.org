:PROPERTIES:
:ID:       e518d6e6-18f5-4bb5-8b92-135b125b5797
:END:
#+title: rust
#+OPTIONS: toc:nil num:nil date:nil \n:nil html-style:nil author:nil timestamp:nil title:nil html-postamble:nil html5-fancy:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-default.css" />
#+HTML_CONTENT_CLASS: container
#+HTML_DOCTYPE: html5
#+INCLUDE: "css.org::navbar" :only-contents t
* rust
- sans-io pattern for protocol state machines
  - ex. tokio-codec or https://www.firezone.dev/blog/sans-io
  - tagless initial https://www.inferara.com/en/blog/rust-tagless-final-gadt/#the-zero-cost-proof-an-experiment-with-the-never-type
- map/fold can contain specific loop optimizations due to types and ownership for iterator mutation/reuse.
  - ex. ~let flat = flatten.into_iter().fold(Vec::new(), |mut accumulator, list| { acc.extend(list); acc });~ is likely as fast as a for loop because acc is a moved vec.
- std::intrinsics contains llvm intrinsics
  - branch prediction with ~likely~, ~select_unpredictable~ (cmov's for branchless), ~unlikely~ etc
- llvm-mca with ~-bottleneck-analysis~ for asm profiling
  - supported by godbolt
- lldb-mcp for assisted debug in llvm 21.1.1+
  - ~git clone --depth 1 --branch llvmorg-21.1.1 https://github.com/llvm/llvm-project~
    - ~cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;lldb" ../llvm~ then build with ~ninja lldb lldb-server~
      - ~./bin/lldb -O 'protocol-server start MCP listen://localhost:39496'~
- https://github.com/rust-lang/rust/issues/93740#issuecomment-1041391284 futex/mutex comparisons
- rustc uses stacker crate for segmented stacks to avoid stack overflow
-  ~cargo test -- --nocapture~ for ~println!()~
- rls removed in 1.65 for rust-analyzer
- HashTable uses SwissTable(DoS resistance)
  - [[https://morestina.net/blog/1843/the-stable-hashmap-trap][conflicts with other hashers]] like fxhash on insertion. Use random init state.
- https://rust-lang.github.io/api-guidelines/checklist.html
- reference counting can be checked by [[https://github.com/matthieu-m/static-rc][statically]]
- default allocator can be changed to jemalloc to avoid heap fragmentation
- cargo feature flag propagation can break for not additive features
  - libraries could use ~RUSTFLAGS='--cfg feature_name="FEATURE_VAL"'~ and a ~build.rs~ like the curve25519-dalek crate (cross compilation?)
- ~cargo update -p PACKAGE --precise VERSION"~ to pin Cargo.lock.
- ~cargo tree~ for dependency tree visual
- ~CROSS_CONTAINER_ENGINE=podman cross build --target x86_64-unknown-freebsd~
  - freebsd tests only run on qemu runner
  - set the image tag for newer cross
- ~RUSTFLAGS="-Z location-detail=none -Zfmt-debug=none -C relocation-model=static -Ctarget-feature=+crt-static" cargo +nightly run -Z build-std=std,panic_abort -Z build-std-features=panic_immediate_abort,optimize_for_size --target x86_64-unknown-linux-gnu --release~ with eyra for full source build
- disable lifo slot in tokio to make all work stealable
- ~RUSTC_BOOTSTRAP=1~ for nightly features on stable
#+NAME: Cross.toml
#+BEGIN_SRC toml :tangle no
[target.x86_64-unknown-freebsd]
image = "ghcr.io/cross-rs/x86_64-unknown-freebsd:main"
#runner = "qemu-user"
#+END_SRC
- rust-toolchain.toml to set nightly/beta and components like llvm-tools-preview
- cargo release profile
#+NAME: rust-release-profile
#+BEGIN_SRC toml :tangle no
[profile.release]
lto = true
codegen-units = 1 # reduce parallel codegen for increased optimization
strip = true
opt-level = "z" # smallest binary instead of speed
panic = "abort"
#+END_SRC

#+NAME: .cargo/config.toml
#+BEGIN_SRC toml :tangle no
[build]
# build extra targets and features
rustflags = [
          #"-Zlocation-detail=none",
          #"-Zfmt-debug=none",
          #"-Ctarget-cpu=native",
          #"-Clink-args=nostartfiles",
          #"-Clink-args=-Wl,",
          #"-Clink-args=-Wl,-n,-N,--no-pie,--no-dynamic-linker,--build-id=none,--gc-sections,-nmagic",
           "--cfg",
           "tokio_unstable"]
target = [
#    "x86_64-unknown-freebsd",
    "x86_64-unknown-linux-gnu",
]
#[target.x86_64-unknown-linux-gnu]
#linker = "./ree"

#[unstable]
#build-std = [
#          "std",
#          "panic_abort",
#]
#build-std-features = [
#                   "optimize_for_size",
#                   "panic_immediate_abort",
#]

#+END_SRC
#+NAME: build.rs
#+BEGIN_SRC rust :tangle no
fn main() {// minimal with origin
    println!("cargo:rustc-link-arg=-nostartfiles");

    // The following options optimize for code size!

    // Tell the linker to exclude the .eh_frame_hdr section.
    println!("cargo:rustc-link-arg=-Wl,--no-eh-frame-hdr");
    // Tell the linker to make the text and data readable and writable. This
    // allows them to occupy the same page.
    println!("cargo:rustc-link-arg=-Wl,-N");
    // Tell the linker to exclude the `.note.gnu.build-id` section.
    println!("cargo:rustc-link-arg=-Wl,--build-id=none");
    // Disable PIE, which adds some code size.
    println!("cargo:rustc-link-arg=-Wl,--no-pie");
    // Disable the `GNU-stack` segment, if we're using lld.
    println!("cargo:rustc-link-arg=-Wl,-z,nognustack");
}
#+END_SRC
