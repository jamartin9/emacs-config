:PROPERTIES:
:ID:       ec8d7fc7-d5fa-4265-b795-043a5e55cd33
:END:
#+title: golang
#+OPTIONS: toc:nil num:nil date:nil \n:nil html-style:nil author:nil timestamp:nil title:nil html-postamble:nil html5-fancy:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-default.css" />
#+HTML_CONTENT_CLASS: container
#+HTML_DOCTYPE: html5
#+INCLUDE: "css.org::navbar" :only-contents t
* golang
- GOMEMLIMIT to control heap size to avoid GC
- disable default proxy
  - go env -w GOPROXY=direct
  - go env -w GOSUMDB=off
- raw syscalls vs libc
  - CGO_ENABLED to toggle libc linkage
- 6 month release cycle
- export with capitalization
- vendors dependencies by default
- large std library
  - can have ossification issues such as ed25519 signature malleability update cadence
    - https://hdevalence.ca/images/ed25519-comparison.png
- TCP ~NODELAY~ set by default (no batching with nagle's algorithm)
- http2 pusher (chrome removing support)
#+NAME: golang-http2-push
#+BEGIN_SRC golang :tangle no
// Send HTML and push image
func handlerHtml(w http.ResponseWriter, r *http.Request) {
	pusher, ok := w.(http.Pusher)
	if ok {
		Info.Println("Pushing image")
		pusher.Push("/image", nil)
	}
	Info.Println("Writing HTML")
	w.Header().Add("Content-Type", "text/html")
	fmt.Fprintf(w, `<html><body><img src="/image"></body></html>`)
}
#+END_SRC
# with golang
- One can use generate_cert.go in crypto/tls to generate cert.pem and key.pem.
